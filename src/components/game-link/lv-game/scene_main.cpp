
#include "lv-game/scene_main.h"
#include "lv-engine/engine.h"

#ifndef PRIPS_DECODER
#define PRIPS_DECODER
#define PRIPS_FILE_VERSION 		0b01
#define PRIPS_FILE_SIGNATURE 	0b01100
#include <math.h>
#include <stdlib.h>
namespace Prips {
typedef unsigned char byte;
typedef unsigned short ui16;
typedef unsigned int ui32;
typedef struct PlanesWalker {
    ui32 byteStart;
    ui32 sizeInBytes;
    const byte *const image;
    ui32 cursor;
    ui32 currentByte;
    ui32 buffer;
    ui32 rleBuffer;
    ui32 currentColorBit;
    PlanesWalker(ui32 _byteStart, const byte *const _image) : byteStart(_byteStart), image(_image) {
        rewind();
    }
    void rewind() {
        buffer = 8;
        cursor = byteStart;
        currentByte = *(image + cursor);
        sizeInBytes = advance();
        goToNextByte();
        sizeInBytes += cursor - byteStart;
        pickFirstBit();
        rleBuffer = advance();
    }
    inline ui32 nextPixelColor() {
        if(--rleBuffer == 0) {
            rleBuffer = advance();
            currentColorBit = !currentColorBit;
        }
        return currentColorBit;
    }
    inline void pickFirstBit() {
        currentColorBit = (currentByte & 0x80) >> 7;
        currentByte <<= 1;
        buffer--;
    }
    inline void goToNextByte() {
        currentByte = *(image + ++cursor);
        buffer = 8;
    }
    ui32 advance() {
        ui32 bit = 0;
        ui32 number = 0;
        ui32 count = 0;
        ui32 counting = 1;
        do {
            bit = (currentByte & 0x80);
            currentByte <<= 1;
            buffer--;
            if(!buffer) goToNextByte();
            if (counting) {
                if(!bit) count++;
                else counting = false;
            }
            if (!counting) {
                number |= bit == 0 ? 0 : 1;
                if(count-- == 0) break;
                else number <<= 1;
            }
        } while (true);
        return number;
    }
} PlanesWalker;
typedef struct File {
    byte planes;
    byte available;
    byte hasAlpha;
    ui16 width;
    ui16 height;
    const byte *const image;
    PlanesWalker *p;
    File(const byte *const _image) : image(_image) {
        byte headerHigh = *(image + 0);
        byte headerLow  = *(image + 1);
        available = (headerHigh & 0b11111000) >> 3 == PRIPS_FILE_SIGNATURE;
        available = available && (headerLow & 0b11000000) >> 6 == PRIPS_FILE_VERSION;
        if (!available) return;
        planes 	= (byte) (headerHigh & 0b00000111);
        width 	= pow(2, 2 + ((byte) (headerLow & 0b00111000) >> 3));
        height 	= pow(2, 2 + ((byte) (headerLow & 0b00000111)));
        p = NULL;
    }
    inline ui32 planesStart() {
        return 2 + pow(2, planes); // 2 bytes header + (n * colors)
    }
    unsigned short color(ui16 index) {
        return *(image + (2 + index)); // 2 bytes header + (n * colors)
    }
    byte* decompress() {
        if (!available) return NULL;
        byte *buffer = (byte*) malloc(height * width * sizeof(byte));
        ui32 planePadding = 0;
        hasAlpha = false;
        for(ui16 pln = 0; pln < planes; pln++) {
            p = new PlanesWalker(planesStart() + planePadding, (const byte *const) image);
            planePadding += p->sizeInBytes;
            for (ui16 y = 0; y < height; y++) {
                for (ui16 x = 0; x < width; x++) {
                    byte b = pln ? *(buffer + (x + y * width)) : 0;
                    b = (b << 1) | p->nextPixelColor();
                    *(buffer + (x + y * width)) = b;
                }
            }
            delete p;
            p = NULL;
        }
        for (ui16 y = 0; y < height; y++) {
            for (ui16 x = 0; x < width; x++) {
                const byte c = color(*(buffer + (x + y * width)));
                *(buffer + (x + y * width)) = c;
                if (c == 0) hasAlpha = true;
            }
        }
        return buffer;
    }
} File;
typedef struct Drawable {
    byte width;
    byte height;
    byte hasAlpha;
    byte *decompressed;
    Drawable(const byte *const data) {
        File *parser = new File(data);
        width = parser->width;
        height = parser->height;
        decompressed = parser->decompress();
        hasAlpha = parser->hasAlpha;
        delete parser;
        parser = NULL;
    }
    void draw(const byte x, const byte y) {
        if (hasAlpha) lvDisplay.blit(lv::Region( x, y, width, height), decompressed);
        else lvDisplay.transfer(lv::Region( x, y, width, height), decompressed);
    }
    ~Drawable() {
        free(decompressed);
        decompressed = NULL;
    }
} Drawable;
}
#endif
namespace PNG {
const unsigned char raw_mario_c[] = {0x64,0x5b,0x0,0xe,0x1c,0x8,0x1b,0x15,0x5,0x1f,0x7,0xf,0x10,0x13,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x4a,0x26,0x85,0x6a,0xae,0x15,0x69,0x7,0xd0,0x3d,0x41,0xb2,0x2,0x78,0x52,0x91,0xa1,0x3a,0x41,0xaa,0x41,0xad,0x23,0x5,0x8,0x8c,0x16,0x14,0x17,0x10,0x18,0x10,0x18,0x10,0x1c,0x40,0x8a,0x2,0x40,0x6,0xc0,0x0,0x86,0x54,0x8,0x10,0x20,0x82,0x4,0x16,0x54,0xd0,0x55,0x38,0x67,0xb9,0x61,0x38,0xb8,0x4e,0x48,0x16,0x48,0x6b,0x84,0xe,0x9a,0x41,0x16,0x25,0x84,0x95,0x2b,0x61,0xa7,0x20,0x46,0x90,0x96,0x36,0x44,0x1a,0x41,0xf4,0x1f,0x88,0x41,0x58,0x84,0x15,0x98,0x81,0xf8,0x8,0xf0,0x2,0x0,0x1,0x98,0xa1,0xd5,0x40,0x82,0x8,0x20,0xe6,0xa1,0x99,0x53,0x84,0xe7,0xb4,0x12,0xb4,0x56,0x12,0x31,0x18,0x6d,0x87,0x50,0x54,0x84,0x6e,0x10,0xb6,0x54,0x13,0xd5,0x26,0x53,0x89,0xe9,0x49,0xa3,0xb,0xa4,0x62,0x26,0x35,0x22,0x91,0x8d,0xa4,0x8a,0x15,0x53,0x85,0xd4,0xa1,0x9c,0xa9,0x5,0x62,0x10,0x56,0x62,0x7,0xe0,0x23,0xc0,0x2,0x80,0x1,0x18,0xa1,0xaa,0xa4,0x18,0xd1,0x21,0x63,0xb8,0x50,0x52,0x84,0xc5,0xa8,0x4c,0x95,0x4a,0x14,0x74,0x90,0x57,0x54,0x96,0x13,0x9d,0xe1,0x39,0x12,0x85,0x44,0xb4,0x13,0x31,0x10,0x4c,0x86,0x30,0xf1,0x25,0x51,0x27,0x7a,0x4d,0xda,0x58,0x88,0xa2,0xaf,0x42,0x4,0x33,0xb4,0x24,0x57,0x12,0x27,0x10,0xac,0xc2,0x45,0x24,0x12,0x10,0xc8,0x11,0x31,0x4a,0x10,0x8,0x4,0x48,0x43,0x84,0x91,0xd5,0x7,0x50,0x1b,0xc0};
Prips::Drawable *mario_c;
};

namespace PNG {
const unsigned char raw_what[] = {0x63,0x5b,0x0,0xe,0x15,0x6,0x1f,0x8,0x0,0x0,0x7,0x20,0x0,0xb8,0x41,0xe6,0x39,0xa,0x4e,0x36,0x3a,0xa3,0x63,0xaa,0x1f,0x87,0xe1,0xf8,0xd8,0x46,0x34,0x82,0xea,0x34,0x82,0xea,0x34,0x82,0x5a,0x8d,0x31,0xc,0xa3,0x4c,0x43,0x28,0xd2,0x8,0x22,0x8d,0x20,0x82,0x28,0xd2,0x8,0x22,0x8e,0x29,0xa,0xe2,0xd0,0x41,0x8b,0x41,0x6,0x30,0x26,0x3,0x18,0x7,0xe0,0x0,0xa7,0x8,0x8e,0x9,0xe,0x63,0x98,0xc4,0xc5,0x34,0x31,0x31,0x4d,0xc,0x51,0xd4,0x31,0x4a,0x42,0xd0,0xc5,0x29,0xb,0x43,0x10,0xa2,0xd0,0xc4,0x63,0xb4,0x31,0x18,0xed,0xc,0x46,0x21,0x90,0xc4,0x10,0x43,0x10,0x41,0xc,0x46,0x21,0x90,0xc4,0x62,0x19,0xc,0x46,0x21,0x90,0xc6,0x39,0x8e,0x8,0x4,0x2,0x0,0x3a,0x0,0x2,0x48,0x0,0x87,0x9,0x8c,0x94,0x62,0x8a,0x98,0x63,0x89,0xb0,0x8e,0x26,0x98,0xa2,0xe2,0x69,0x8a,0x2e,0x26,0xa3,0x9e,0x24,0x85,0x21,0x5e,0x24,0x85,0x21,0x5e,0x26,0x85,0x15,0xe2,0x44,0x9c,0xb8,0x91,0x27,0x2e,0x24,0x49,0x4,0x62,0x42,0xb8,0x90,0xae,0x24,0x49,0x4,0x62,0x44,0x90,0x46,0x24,0x49,0x4,0x62,0x42,0xb8,0x9a,0x8,0x38,0x9a,0x8,0x38,0xa8,0x4e,0x30,0x26,0x2,0x98};
Prips::Drawable *what;
};

namespace PNG {
const unsigned char raw_mario_b[] = {0x64,0x5b,0x0,0xe,0x1c,0x8,0x1b,0x15,0x5,0x1f,0x7,0xf,0x10,0x13,0x1,0x0,0x0,0x0,0x5,0x40,0x0,0x4a,0x26,0x85,0x6a,0xae,0x15,0x69,0x7,0xd0,0x3d,0x41,0xb2,0x2,0x78,0x52,0x91,0xa1,0x3a,0x41,0xaa,0x45,0x85,0x34,0x8c,0x14,0xd2,0x30,0x50,0x60,0x50,0x58,0x58,0x50,0x60,0x40,0x56,0xf2,0x3,0xd8,0x1d,0x0,0x6,0x40,0x0,0x86,0x54,0x8,0x10,0x20,0x82,0x4,0x16,0x54,0xd0,0x55,0x38,0x67,0xb9,0x61,0x38,0xb8,0x4e,0x48,0x16,0x48,0x6b,0x91,0x89,0x3a,0x69,0x22,0x8a,0x62,0x58,0x49,0x52,0xb6,0x1a,0x28,0x52,0x90,0x6e,0x90,0x1e,0xd0,0x79,0x99,0x5,0xe4,0x20,0x71,0x1,0xc8,0x2,0x8,0x1,0x98,0xa1,0xd5,0x40,0x82,0x8,0x20,0xe6,0xa1,0x99,0x53,0x84,0xe7,0xb4,0x12,0xb4,0x56,0x12,0x31,0x18,0x6d,0x90,0xc1,0x34,0xca,0xe2,0x48,0x46,0xfa,0x79,0xed,0x95,0x10,0xb8,0x8d,0x52,0x61,0x5e,0x94,0x98,0x4e,0x91,0xa1,0x54,0x8a,0x17,0x48,0xa1,0x61,0x41,0x61,0x21,0x85,0x20,0x60,0x8a,0x19,0x66,0x41,0x79,0x8,0x1c,0x40,0x72,0x2,0x88,0x1,0x18,0xa1,0xaa,0xa4,0x18,0xd1,0x21,0x63,0xb8,0x50,0x52,0x84,0xc5,0xa8,0x4c,0x95,0x4a,0x14,0x74,0x90,0x57,0x54,0x96,0x13,0x9d,0xe1,0x39,0x12,0x94,0xc2,0x84,0xb3,0xb8,0xa3,0x10,0xc9,0xe2,0x8,0x63,0x4d,0x98,0x49,0x54,0xf9,0xde,0x93,0x71,0x22,0x22,0x88,0x11,0x10,0x48,0x4c,0x56,0x14,0x12,0xa1,0x4c,0xea,0x14,0xcc,0xa1,0x6d,0xb4,0x15,0x69,0x48,0x13,0xc9,0x38,0x48,0xc8,0xc1,0x32,0xf2,0x5,0x9c,0x80,0x52};
Prips::Drawable *mario_b;
};
int frame;

namespace PNG {
const unsigned char raw_background[] = {0x64,0x6d,0xf,0x17,0x15,0x8,0x1d,0x7,0x1,0x3,0x4,0x6,0x5,0x11,0x13,0x0,0x0,0x0,0x1,0xf2,0x0,0x2,0xd0,0xa,0xb4,0x1e,0x49,0x24,0x92,0x49,0x24,0xb,0xe9,0x24,0x93,0xb7,0x8b,0x63,0x5e,0x92,0x49,0x24,0x92,0x41,0xc6,0x35,0xb4,0x92,0xdb,0x28,0xb2,0x8b,0x2b,0x46,0x46,0x41,0xf2,0x8b,0x2a,0x47,0x23,0x54,0x2d,0x50,0xb5,0x40,0xd1,0x50,0xb5,0x42,0xd6,0xcb,0x13,0x2c,0x4c,0xa0,0xd0,0xb1,0x32,0xc4,0xc8,0xcb,0x13,0x2c,0x4c,0xa0,0xd0,0xb1,0x32,0xc4,0xc8,0xcb,0x13,0x2c,0x4c,0xa0,0xd0,0xb1,0x32,0xc4,0xc8,0xca,0x2c,0xa2,0xca,0xd,0xa,0x2c,0xa2,0xc8,0xca,0x2c,0xad,0x13,0x28,0x34,0x28,0xb2,0x8b,0x23,0x4a,0x2d,0x2b,0x44,0xd2,0x83,0x44,0xa2,0xd2,0x8b,0x41,0xd4,0x48,0x3,0x21,0x43,0x12,0x40,0x6c,0x43,0xc,0xb,0x48,0x42,0x10,0x84,0x21,0x8,0x48,0x59,0xc,0x36,0x42,0x10,0x84,0x21,0x8,0x40,0x60,0x9,0x12,0x50,0x65,0x1f,0x1f,0x40,0x91,0x25,0x17,0x1f,0xa,0x14,0x59,0x45,0x83,0x11,0x5,0x16,0x50,0x9b,0x1a,0xc6,0x83,0x1,0x2c,0x6b,0xa,0x71,0xbc,0x6e,0xb,0x84,0xf1,0xbc,0x1b,0x82,0xc0,0x2a,0x82,0xb0,0x2a,0x82,0xb0,0x2a,0x82,0xb0,0x55,0x1f,0x1f,0x14,0xa,0xdc,0x7c,0x7c,0x85,0x16,0x51,0x65,0x10,0xc,0x45,0x94,0x59,0x5b,0x1a,0xc6,0xb1,0x0,0xb6,0xc6,0xb1,0xac,0x9c,0x6f,0x1b,0xc4,0x2,0xdf,0x1b,0xc6,0xf0,0x5e,0xb,0x0,0xaa,0xa,0xc0,0xaa,0xa,0xc0,0xaa,0xa,0xc1,0x94,0x7c,0x7d,0x2,0xb1,0x71,0xf0,0xa1,0x45,0x94,0x58,0x31,0x10,0x51,0x65,0x14,0x0,0x40,0xc0,0x0,0x2,0x88,0x34,0x64,0x16,0x46,0x46,0x46,0x46,0x40,0x99,0x19,0x19,0x3c,0x95,0x20,0x50,0x95,0x25,0x49,0x52,0x54,0x80,0x90,0x95,0x25,0x49,0x9,0x8c,0x5,0x83,0x8,0x30,0x3a,0x87,0x88,0x1e,0x8c,0x8c,0x87,0x88,0x10,0x20,0x7a,0x32,0x29,0x2,0x4,0x8,0x10,0x84,0x21,0x2,0x4,0x18,0x40,0x81,0x8,0x42,0x10,0x12,0x10,0x84,0x21,0x1,0xa1,0x8,0x47,0x24,0x11,0x49,0x52,0x54,0x90,0x65,0x25,0x49,0x46,0x4,0x46,0x46,0x46,0x6,0x46,0x46,0x64,0x18,0xca,0xc6,0x90,0x84,0x21,0x6,0x32,0xb2,0xb2,0xb1,0xa4,0x21,0x15,0x5a,0x29,0x98,0xb2,0xa4,0x92,0x49,0x24,0x92,0x28,0x5d,0x8a,0x35,0x24,0x92,0x76,0xf3,0x12,0xe2,0x5b,0xd2,0x49,0x24,0x92,0x48,0xc1,0x5b,0x88,0x23,0x69,0x25,0xb6,0x52,0x1a,0x5a,0x45,0x95,0xa3,0x23,0x23,0x85,0xe5,0x89,0x95,0x23,0x95,0x14,0x59,0x45,0x94,0xe8,0xc8,0xc1,0xb4,0x51,0x65,0x16,0x69,0x62,0x65,0x89,0x96,0xc,0x51,0x62,0x65,0x89,0x9a,0x58,0x99,0x62,0x65,0x83,0x6,0x58,0x99,0x62,0x66,0x96,0x26,0x58,0x99,0x60,0xc1,0x96,0x26,0x58,0x99,0xa5,0x16,0x51,0x65,0x82,0xf2,0x14,0x59,0x45,0x9a,0x58,0x99,0x62,0x65,0x83,0x29,0x62,0x65,0x89,0x9a,0x58,0x99,0x5a,0x4e,0x58,0x96,0x1d,0x64,0x65,0x89,0x96,0x26,0x6b,0x62,0x6c,0xa9,0xab,0x62,0x2d,0xc,0x43,0x2d,0x48,0xd8,0x9b,0x74,0x6b,0x5,0xc1,0x52,0x4,0x81,0x40,0x2c,0x41,0x42,0x4,0x50,0x15,0x21,0x33,0x4,0x20,0x55,0x84,0xcc,0x10,0x82,0xd4,0x64,0x64,0x64,0x64,0x68,0x48,0x40,0xf9,0x91,0x91,0x91,0x91,0x91,0x8,0x42,0x10,0x84,0x21,0x8,0x44,0xa,0x51,0x8,0x42,0x10,0x84,0x21,0x1,0x80,0xd6,0x44,0x90,0x40,0x16,0x90,0x84,0x21,0x8,0x42,0x10,0x98,0xbb,0x56,0x98,0xfc,0x84,0x21,0x8,0x42,0x10,0x8c,0x16,0x61,0x33,0x4,0x30,0x51,0x72,0x4d,0x72,0x4d,0x72,0x78,0x25,0x4b,0xdc,0x93,0x5c,0x93,0x5e,0x42,0x15,0x14,0x85,0x45,0x21,0x10,0x23,0x10,0x42,0x15,0x14,0x85,0x45,0x6c,0xa5,0x6c,0xa5,0x6c,0xa4,0x40,0x8d,0x25,0xb2,0x95,0xb2,0x95,0xb2,0x73,0x32,0x73,0x32,0x73,0x38,0x2b,0xf3,0x32,0x73,0x32,0x71,0x12,0x71,0x12,0x71,0x12,0x78,0x2a,0xc9,0x27,0x11,0x27,0x11,0x1d,0x1f,0x1f,0x82,0x9c,0x64,0x7c,0x54,0xb1,0x32,0xc4,0xcb,0x2e,0xa,0x68,0xb1,0x32,0xc4,0xcb,0x5,0x98,0x29,0xc1,0x4c,0xd7,0x24,0xd7,0x24,0xd5,0x82,0x9d,0x4d,0x72,0x4d,0x72,0x4a,0x44,0x52,0x15,0x14,0x85,0x46,0xb2,0x10,0x84,0x21,0x8,0x42,0x34,0x44,0x52,0x15,0x14,0x85,0x45,0x6c,0xa5,0x6c,0xa5,0x64,0x5,0xa5,0x6c,0xa5,0x6c,0xa5,0x44,0x27,0x33,0x27,0x33,0x26,0x81,0x69,0x9,0xcc,0xc9,0xcc,0xc9,0xc4,0x49,0xc4,0x49,0xcf,0x5,0x9f,0x11,0x27,0x11,0x27,0x3c,0x7c,0x7c,0xf0,0x57,0x24,0x7c,0x7c,0x54,0xb1,0x32,0xc4,0xdc,0x15,0xc4,0x4b,0x13,0x2c,0x1a,0x41,0x5c,0x14,0x5c,0x93,0x5c,0x93,0x5c,0x9c,0x15,0xf7,0x24,0xd7,0x24,0xd7,0x90,0x85,0x45,0x21,0x51,0x48,0x40,0x5a,0x42,0x15,0x14,0x85,0x45,0x60,0x0,0x4f,0x20,0x0,0x9,0x1f,0x8f,0x82,0xf8,0x6,0xde,0x3e,0xb,0xe0,0x9,0xce,0x9,0x60,0x24,0x21,0x28,0xc8,0xf8,0x2f,0x84,0xa5,0x85,0xca,0xc,0x60,0xa4,0xa1,0xc6,0xc,0xa0,0xa9,0x87,0x78,0x30,0x28,0x28,0xe0,0x52,0x81,0x16,0x3e,0x3e,0x3e,0x26,0x9,0x60,0x2a,0xe0,0x5f,0x87,0x98,0x17,0x58,0xa8,0x4e,0x2e,0x3e,0xb,0xe1,0x38,0x11,0xa0,0x1c,0x88,0x17,0xe0,0x29,0xa1,0xf8,0xf8,0xf8,0x7e,0x16,0x81,0x7e,0x1f,0x81,0x7e,0x1d,0x28,0x16,0xca,0x1d,0x81,0x7e,0x1f,0x85,0x61,0xf8,0xf8,0xf8,0x98,0x56,0x1,0x97,0x87,0xe3,0xe3,0xe1,0xf8,0xa8,0x17,0xe0,0x1c,0x88,0xe,0x68,0x2f,0x84,0xa1,0xc8,0x36,0x82,0x92,0x81,0x46,0xa,0x98,0x14,0xa,0xa,0x38,0x14,0xa0,0x75,0x89,0x82,0x58,0xf8,0x7e,0x3,0x6e,0x7,0xe6,0xe,0xa0,0xbe,0x13,0x86,0xe0,0xaa,0x0,0x5e,0xc6,0x31,0x82,0x66,0x30,0x83,0x18,0x69,0xa,0x28,0x82,0x8a,0x46,0x46,0x42,0x8a,0x20,0x40,0x82,0x8a,0x46,0x45,0x20,0xa3,0x10,0xc2,0x88,0x42,0x10,0x82,0x8c,0x41,0x84,0x30,0xa2,0x10,0x84,0x20,0xa0,0x80,0xa2,0x10,0x84,0x20,0xa0,0x40,0x28,0x84,0x23,0x92,0x24,0x20,0x26,0x4a,0x92,0xa4,0x89,0x4,0x2,0x64,0xa9,0x28,0xc2,0x2,0x42,0xc,0x8c,0x8c,0x20,0x11,0x8,0x32,0x33,0x21,0x8,0x46,0x56,0x52,0x10,0x84,0x21,0x8,0x42,0x11,0x95,0x95,0x95,0x94,0x84,0x21,0x8,0xd5,0xa0,0xf2,0x49,0x24,0x92,0x49,0x20,0x5f,0x49,0x24,0x9b,0xb9,0xca,0xc5,0x2b,0xb4,0x64,0x64,0x28,0x2c,0xc4,0xbb,0xa4,0x64,0x59,0x6c,0xe5,0x68,0xc5,0xa4,0x64,0x64,0x70,0xc1,0x45,0x97,0x46,0x93,0xaa,0x16,0xa8,0x5a,0xa9,0x91,0x91,0x83,0x7a,0xa1,0x6a,0x85,0xad,0xaa,0xe7,0xaa,0xe7,0xaa,0x6,0x5a,0xae,0x7a,0xae,0x7a,0xd9,0x67,0xe5,0x9f,0x94,0x18,0xa9,0x67,0xe5,0x9f,0x91,0xb3,0xd5,0x33,0xd5,0x30,0x66,0xac,0xf5,0x4c,0xf5,0x4c,0xa4,0x18,0x41,0x84,0x6,0xd,0x10,0x61,0x6,0x36,0x51,0x65,0x68,0x99,0x41,0xa1,0x45,0x94,0x59,0xf,0x1f,0xa4,0x84,0x45,0x30,0xeb,0x22,0x2c,0x7c,0x2a,0x87,0x2a,0x4c,0xc8,0x4d,0xa1,0x88,0x65,0xab,0x22,0x1c,0x92,0x15,0x2,0x11,0x0,0xcd,0xa,0x90,0x25,0x3,0x41,0x80,0xf4,0x60,0x7c,0x8c,0x8c,0x8c,0x8c,0x83,0x22,0x2,0xc8,0xc8,0xc8,0xc8,0xc8,0x84,0x21,0x8,0x42,0x10,0x84,0x24,0x2c,0x86,0x24,0xb2,0x10,0x84,0x21,0x8,0x42,0x1c,0x84,0x21,0x8,0x42,0x10,0x84,0x1c,0xc8,0x92,0x18,0x88,0x42,0x10,0x84,0x21,0x8,0x40,0x79,0x6a,0xd3,0x7,0x0,0xb0,0x2a,0x60,0x90,0x28,0xb9,0x26,0xb9,0x26,0xb9,0x30,0x4e,0x89,0xb9,0x26,0xb9,0x26,0xbc,0x84,0x2a,0x29,0xa,0x8a,0x42,0x41,0x21,0xca,0x42,0xa2,0x90,0xa8,0xad,0x94,0xad,0x94,0xad,0x94,0x14,0xa4,0x8a,0x52,0xb6,0x52,0xb6,0x4e,0x66,0x4e,0x66,0x4e,0x60,0x63,0x99,0x93,0x99,0x93,0x88,0x93,0x88,0x93,0x88,0x93,0x5,0xc4,0x93,0x88,0x93,0x88,0x8e,0x8f,0x8f,0x5,0xa3,0x23,0xe2,0xa5,0x89,0x96,0x26,0x59,0x41,0x71,0x62,0x65,0x89,0x96,0xb,0x1,0x68,0x29,0x9a,0xe4,0x9a,0xe4,0x9a,0x81,0x6a,0x9a,0xe4,0x9a,0xe4,0x94,0x88,0xa4,0x2a,0x29,0xa,0x85,0x10,0x84,0x21,0x8,0x42,0x10,0x92,0x22,0x90,0xa8,0xa4,0x2a,0x2b,0x65,0x2b,0x65,0x2b,0x30,0x2a,0x33,0x65,0x2b,0x65,0x2a,0x21,0x39,0x99,0x39,0x99,0x36,0xa,0xca,0x4e,0x66,0x4e,0x66,0x4e,0x22,0x4e,0x22,0x4e,0x74,0xa,0x97,0x88,0x93,0x88,0x93,0x9e,0x3e,0x3e,0x74,0xa,0x51,0x23,0xe3,0xe2,0xa5,0x89,0x96,0x26,0xd0,0x29,0x42,0x25,0x89,0x96,0xd,0x10,0x29,0x40,0xa2,0xe4,0x9a,0xe4,0x9a,0xe4,0xd0,0x29,0x5b,0x92,0x6b,0x92,0x6b,0xc8,0x42,0xa2,0x90,0xa8,0xa4,0x28,0x2b,0x29,0xa,0x8a,0x42,0xa2,0xb0,0x0,0x50,0x60,0x0,0x16,0x0,0x2,0x0,0x2,0x0,0x1,0xf,0xc7,0xc1,0x7c,0x3,0x6f,0x1f,0x5,0xf0,0x4,0xe7,0x4,0xb0,0x12,0x10,0xfc,0x7c,0x17,0xc3,0x10,0xc3,0x2,0xeb,0xe,0xb0,0x65,0x5,0x4c,0xa,0x2c,0xf,0xd0,0x22,0xc7,0xc7,0xc7,0xc1,0x7c,0x2,0x57,0x2,0xfc,0x5c,0x3f,0x1f,0x5,0xf0,0x2d,0x40,0x39,0x10,0x2f,0xc0,0x53,0x43,0xf1,0xf1,0xf0,0xfc,0x4,0xb4,0xb,0xf0,0xf3,0x2,0xeb,0xf,0x40,0xbf,0x6,0xb0,0xfc,0x7c,0x7c,0x3f,0x0,0xcb,0xc3,0xf1,0xf1,0xf0,0xfc,0x54,0xb,0xf0,0xe,0x44,0x7,0x34,0x17,0xc1,0x7c,0xc,0x2c,0xa,0x50,0x54,0xc0,0xa2,0xc0,0xfd,0x3,0xac,0x17,0xc7,0xc3,0xf0,0xa,0xdc,0x1d,0xc1,0x7c,0x17,0xc1,0x54,0x3,0xc6,0x41,0x84,0x18,0x41,0x84,0x18,0x41,0x84,0x18,0x41,0x84,0x14,0x20,0x40,0x81,0x2,0x4,0x8,0x10,0x20,0x40,0x81,0x2,0x4,0x8,0x30,0xc2,0xc,0x20,0xc2,0xc,0x20,0xc2,0xc,0x20,0xc2,0xc,0x40,0xa,0x2,0x64,0x1e,0x46,0x46,0x46,0x40,0xb9,0x19,0x19,0x90,0x81,0xc2,0x10,0x84,0x21,0x8,0xb,0x8,0x42,0x10,0x84,0x20,0x70,0x84,0x21,0x8,0x42,0x2,0xc2,0x10,0x84,0x21,0xa,0x1a,0x29,0x8,0x42,0x10,0xa0,0xa8,0xa4,0x21,0x1c,0x92,0x6,0x89,0x25,0x49,0x52,0x48,0xa,0x89,0x25,0x49,0x46,0x20,0x68,0x86,0x46,0x46,0x20,0x2a,0x21,0x91,0x99,0x4,0x3b,0xbb,0xb1,0x24,0x21,0x8,0x41,0xe,0xee,0xee,0xee,0xec,0x49,0x8,0x45,0x46,0x28,0x51,0x15,0x24,0x92,0x49,0x24,0x8a,0x9,0x19,0x12,0x49,0x19,0x5a,0x31,0x58,0xa5,0x69,0x24,0x92,0x49,0x24,0x8c,0x16,0x62,0x5d,0xd2,0x49,0x22,0xcb,0x67,0x2b,0x46,0x2d,0x23,0x23,0x23,0x86,0xa,0x2c,0xba,0x34,0x9d,0x50,0xb5,0x42,0xd5,0x4c,0x8c,0x8c,0x1b,0xd5,0xb,0x54,0x2d,0x6d,0x57,0x3d,0x57,0x3d,0x50,0x32,0xd5,0x73,0xd5,0x73,0xd6,0xcb,0x3f,0x2c,0xfc,0xa0,0xc6,0x8b,0x3f,0x2c,0xfc,0x8d,0x8d,0x63,0x58,0x33,0x56,0x35,0x8d,0x65,0x20,0xc2,0xc,0x20,0x30,0x68,0x83,0x8,0x31,0xb2,0x8b,0x28,0x9c,0xa0,0xd0,0xa2,0xca,0x2c,0x87,0x8f,0xd2,0x42,0x22,0x98,0x75,0x91,0x16,0x3e,0x15,0x43,0x95,0x26,0x64,0x26,0xd0,0xc4,0x32,0xd5,0x91,0xe,0x49,0xa,0x81,0x8,0x80,0x66,0x85,0x48,0x12,0x81,0xa2,0x48,0x1e,0x8c,0xf,0x91,0x91,0x91,0x91,0x90,0x64,0x40,0x59,0x19,0x19,0x19,0x19,0x12,0xa4,0xa9,0x2a,0x4a,0x92,0xa4,0x82,0x44,0x96,0x4a,0x92,0xa4,0xa9,0x2a,0x4a,0x21,0x8,0x42,0x10,0x84,0x21,0x8,0x39,0x91,0x24,0x31,0x10,0x84,0x21,0x8,0x42,0x10,0x87,0x21,0x8,0x42,0x10,0x84,0x21,0x23,0x2d,0x5a,0x61,0x9,0x8,0x42,0x10,0x84,0x21,0x18,0x2c,0x85,0xc,0x11,0x82,0x8b,0x8b,0xb8,0xbb,0x9a,0x9,0x93,0xee,0x2e,0xe2,0xef,0x20,0xb2,0x8b,0x28,0x88,0x24,0x3c,0x82,0xca,0x2c,0xad,0x96,0xed,0x96,0xed,0x96,0xa,0x12,0x49,0x96,0xed,0x96,0xed,0x93,0x9e,0x5e,0x79,0x79,0xe0,0xbb,0x9e,0x5e,0x79,0x78,0x89,0x38,0x89,0x38,0x89,0x38,0x2c,0x92,0x4e,0x22,0x4e,0x22,0x3a,0x3e,0x3e,0xa,0xe3,0x23,0xe2,0xa5,0x89,0x96,0x26,0x59,0x60,0xad,0x16,0x26,0x58,0x99,0x60,0xb2,0xa,0xe0,0xc2,0xe2,0xee,0x2e,0xa0,0xae,0x26,0xe2,0xee,0x26,0x62,0x8b,0x28,0xb3,0x10,0x84,0x21,0x8,0x42,0x10,0x84,0x98,0xa2,0xca,0x2e,0xed,0x96,0xed,0x96,0xec,0x88,0x15,0x6e,0xd9,0x6e,0xd9,0x6e,0xb9,0x79,0xe5,0xe7,0x97,0x50,0x57,0xe5,0xe7,0x97,0x9e,0x5e,0x22,0x4e,0x22,0x4e,0x7c,0x15,0x7e,0x22,0x4e,0x22,0x4e,0x78,0xf8,0xf9,0xf0,0x53,0x92,0x3e,0x3e,0x2a,0x58,0x99,0x62,0x6f,0x5,0x38,0x89,0x62,0x65,0x83,0x4c,0x14,0xe0,0xa2,0xe2,0xee,0x2e,0xe6,0xc1,0x4f,0xb8,0xbb,0x8b,0xbc,0x82,0xca,0x2c,0xa2,0xc8,0x42,0x10,0x84,0x21,0x8,0x4c,0x82,0xca,0x2c,0xac};
Prips::Drawable *background;
};

namespace PNG {
const unsigned char raw_mario_d[] = {0x64,0x5b,0x0,0xe,0x1c,0x8,0x1b,0x15,0x5,0x1f,0x7,0xf,0x10,0x13,0x1,0x11,0x0,0x0,0x5,0x20,0x0,0x42,0x26,0x85,0x6a,0xae,0x15,0x69,0x7,0xd0,0x3d,0x41,0xb2,0x2,0x78,0x52,0x91,0xa1,0x3a,0x41,0xaa,0x45,0x85,0x34,0x8e,0x13,0x22,0x38,0x54,0x60,0x54,0x42,0x85,0x44,0x6,0x4,0x7,0x10,0x22,0x80,0xb0,0x7,0xc0,0x1,0x99,0x50,0x20,0x40,0x82,0x8,0x10,0x59,0x53,0x41,0x54,0xe1,0x9e,0xe5,0x84,0xe2,0xe1,0x39,0x20,0x59,0x21,0xaf,0x8e,0x3a,0x69,0x26,0x31,0x89,0x68,0x83,0x15,0x2b,0x73,0x84,0x8b,0x10,0x2e,0x91,0xb1,0x2,0x64,0x46,0xc4,0x89,0x42,0x94,0x40,0xa4,0x2b,0x95,0xb,0x88,0x41,0x58,0x84,0x15,0x98,0x81,0xf8,0xa,0xf0,0x2,0x38,0x1,0x18,0xa1,0xd5,0x40,0x82,0x8,0x20,0xe6,0xa1,0x99,0x53,0x84,0xe7,0xb4,0x12,0xb4,0x56,0x12,0x31,0x18,0x6d,0xa2,0x5,0xd2,0x91,0xc,0x21,0x1b,0xee,0x2a,0xd9,0x51,0x1e,0x2b,0x54,0x99,0x48,0x33,0xa5,0x27,0x38,0xba,0x46,0xc4,0xc,0x48,0xac,0x40,0x9a,0x48,0xac,0x48,0x95,0x39,0x44,0xa,0x52,0x9a,0x54,0x2f,0x2a,0x41,0x58,0x84,0x15,0x98,0x81,0xf8,0xa,0xf0,0x2,0x78,0x2,0x62,0x86,0xaa,0x90,0x63,0x44,0x85,0x8e,0xe1,0x41,0x4a,0x13,0x16,0xa1,0x32,0x55,0x28,0x51,0xd2,0x41,0x5d,0x52,0x58,0x4e,0x77,0x84,0xe4,0x4a,0xc8,0x38,0x4b,0x10,0x34,0xc4,0x53,0x8b,0x21,0x86,0x9,0x12,0x55,0x38,0x97,0xa4,0xdc,0xe2,0xa2,0x86,0x9,0x10,0x41,0x62,0x45,0x46,0x8,0xc4,0x21,0xa6,0x14,0x87,0x18,0x43,0x1e,0x63,0x14,0xe5,0x66,0x8,0x4,0x48,0x43,0x84,0x91,0xd5,0x7,0x50,0x8,0xf0};
Prips::Drawable *mario_d;
};

namespace PNG {
const unsigned char raw_mario_a[] = {0x64,0x5b,0x0,0xe,0x1c,0x8,0x1b,0x15,0x5,0x1f,0x1,0x7,0xf,0x10,0x13,0x0,0x0,0x0,0x5,0x0,0x0,0x49,0xd9,0x61,0x5d,0xee,0x15,0x69,0x7,0xd0,0x3d,0x41,0xb2,0x2,0x78,0x52,0x91,0xa1,0x3a,0x41,0xaa,0x41,0xad,0x23,0x5,0x34,0x8c,0x14,0x18,0x15,0x14,0x16,0x14,0x17,0x10,0x19,0x30,0x3a,0x81,0xe0,0x6,0x80,0x0,0x86,0x54,0x8,0x10,0x20,0x82,0x4,0x16,0x54,0xd0,0x55,0x38,0x67,0xb9,0x61,0x38,0xb8,0x4e,0x48,0x16,0x48,0x6b,0x84,0xe,0x9a,0x41,0x16,0x25,0x84,0x95,0x2b,0x61,0x3a,0x49,0xc8,0x11,0x12,0x56,0x3c,0x40,0x64,0xe1,0x93,0x6,0xd8,0x17,0x88,0x1c,0x20,0x1d,0x0,0x7,0xc0,0x1,0x98,0xa1,0xd5,0x40,0x82,0x8,0x20,0xe6,0xa1,0x99,0x53,0x84,0xe7,0xb4,0x12,0xb4,0x56,0x12,0x31,0x18,0x6d,0x87,0x50,0x54,0x84,0x6e,0x10,0xb6,0x54,0x13,0xc5,0x14,0xe2,0x7a,0x52,0x68,0xc1,0x62,0x26,0x2e,0x25,0x36,0x3a,0x21,0x85,0x11,0xd8,0x56,0x66,0x16,0x4c,0xa1,0x71,0x1,0x93,0x6,0xc8,0x1c,0x20,0x1d,0x0,0x2,0x58,0x1,0x18,0xa1,0xaa,0xa4,0x18,0xd1,0x21,0x63,0xb8,0x50,0x52,0x84,0xc5,0xa8,0x4c,0x95,0x4a,0x14,0x5e,0x98,0x51,0xf5,0x20,0x4c,0x88,0xb8,0x4e,0x42,0x85,0x44,0xb4,0x13,0x10,0x90,0x4c,0x42,0x30,0xf1,0x25,0x18,0x76,0x24,0xe9,0x62,0x3a,0x44,0x2a,0xf4,0x23,0x49,0x33,0xb4,0x2a,0x91,0x28,0x48,0xba,0x4d,0x10,0xc3,0x27,0x41,0xd4,0x18,0xb2,0x6,0x4c,0xe,0x8c,0x19,0x38,0x64,0xe0,0x53};
Prips::Drawable *mario_a;
};


void scene_main_setup() {
    scenesTable[SCENE_MAIN] = {
        &scene_main_on_awake,
        &scene_main_on_enter,
        &scene_main_on_frame,
        &scene_main_on_exit
    };
}

void scene_main_on_awake() {

}

void scene_main_on_enter() {
    PNG::mario_c = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_mario_c);
    PNG::what = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_what);
    PNG::mario_b = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_mario_b);
    frame = 10;
    PNG::background = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_background);
    PNG::mario_d = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_mario_d);
    PNG::mario_a = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_mario_a);

}

void scene_main_on_frame() {
    lvDisplay.clear(0);
    
    PNG::background->draw(192, 112);
    PNG::background->draw(192, 0);
    PNG::background->draw(128, 112);
    PNG::background->draw(0, 112);
    PNG::background->draw(0, 0);
    PNG::background->draw(128, 0);

    PNG::background->draw(1 + 180, 112);
    PNG::background->draw(1 + 180, 0);
    PNG::background->draw(1 + 128, 112);
    PNG::background->draw(1 + 0, 112);
    PNG::background->draw(1 + 0, 0);
    PNG::background->draw(1 + 128, 0);

    PNG::what->draw(80, 30);
    PNG::what->draw(80+23, 30);
    PNG::what->draw(38,    97);
    PNG::what->draw(38+23, 97);

    PNG::what->draw(80, 128 + 30);
    PNG::what->draw(80+23, 128 +  30);

    switch((frame/3)%4) {
    case 0:
        PNG::mario_a->draw(320 - frame%320,72);
        break;
    case 1:
        PNG::mario_b->draw(320 - frame%320,72);
        break;
    case 2:
        PNG::mario_c->draw(320 - frame%320,72);
        break;
    case 3:
        PNG::mario_d->draw(320 - frame%320,72);
        break;
    };
    frame++;
}

void scene_main_on_exit() {
    delete PNG::mario_c;
    PNG::mario_c = NULL;
    delete PNG::what;
    PNG::what = NULL;
    delete PNG::mario_b;
    PNG::mario_b = NULL;
    delete PNG::background;
    PNG::background = NULL;
    delete PNG::mario_d;
    PNG::mario_d = NULL;
    delete PNG::mario_a;
    PNG::mario_a = NULL;

}
