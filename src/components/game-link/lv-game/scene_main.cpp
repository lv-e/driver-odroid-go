
#include "lv-game/scene_main.h"
#include "lv-engine/engine.h"
#include "esp_attr.h"
#include "esp_heap_caps.h"

#ifndef PRIPS_DECODER
#define PRIPS_DECODER
#define PRIPS_FILE_VERSION 		0b01
#define PRIPS_FILE_SIGNATURE 	0b01100
#include <math.h>
#include <stdlib.h>
namespace Prips {
typedef unsigned char byte;
typedef unsigned short ui16;
typedef unsigned int ui32;
typedef struct PlanesWalker {
    ui32 byteStart;
    ui32 sizeInBytes;
    const byte *const image;
    ui32 cursor;
    ui32 currentByte;
    ui32 buffer;
    ui32 rleBuffer;
    ui32 currentColorBit;
    PlanesWalker(ui32 _byteStart, const byte *const _image) : byteStart(_byteStart), image(_image) {
        rewind();
    }
    void rewind() {
        buffer = 8;
        cursor = byteStart;
        currentByte = *(image + cursor);
        sizeInBytes = advance();
        goToNextByte();
        sizeInBytes += cursor - byteStart;
        pickFirstBit();
        rleBuffer = advance();
    }
    inline ui32 nextPixelColor() {
        if(--rleBuffer == 0) {
            rleBuffer = advance();
            currentColorBit = !currentColorBit;
        }
        return currentColorBit;
    }
    inline void pickFirstBit() {
        currentColorBit = (currentByte & 0x80) >> 7;
        currentByte <<= 1;
        buffer--;
    }
    inline void goToNextByte() {
        currentByte = *(image + ++cursor);
        buffer = 8;
    }
    ui32 advance() {
        ui32 bit = 0;
        ui32 number = 0;
        ui32 count = 0;
        ui32 counting = 1;
        do {
            bit = (currentByte & 0x80);
            currentByte <<= 1;
            buffer--;
            if(!buffer) goToNextByte();
            if (counting) {
                if(!bit) count++;
                else counting = false;
            }
            if (!counting) {
                number |= bit == 0 ? 0 : 1;
                if(count-- == 0) break;
                else number <<= 1;
            }
        } while (true);
        return number;
    }
} PlanesWalker;
typedef struct File {
    byte planes;
    byte available;
    byte hasAlpha;
    ui16 width;
    ui16 height;
    const byte *const image;
    PlanesWalker *p;
    File(const byte *const _image) : image(_image) {
        byte headerHigh = *(image + 0);
        byte headerLow  = *(image + 1);
        available = (headerHigh & 0b11111000) >> 3 == PRIPS_FILE_SIGNATURE;
        available = available && (headerLow & 0b11000000) >> 6 == PRIPS_FILE_VERSION;
        if (!available) return;
        planes 	= (byte) (headerHigh & 0b00000111);
        width 	= pow(2, 2 + ((byte) (headerLow & 0b00111000) >> 3));
        height 	= pow(2, 2 + ((byte) (headerLow & 0b00000111)));
        p = NULL;
    }
    inline ui32 planesStart() {
        return 2 + pow(2, planes); // 2 bytes header + (n * colors)
    }
    unsigned short color(ui16 index) {
        return *(image + (2 + index)); // 2 bytes header + (n * colors)
    }
    byte* decompress() {
        if (!available) return NULL;
        byte *buffer = (byte*) heap_caps_malloc(height * width * sizeof(byte), MALLOC_CAP_8BIT | MALLOC_CAP_SPIRAM);
        ui32 planePadding = 0;
        hasAlpha = false;
        for(ui16 pln = 0; pln < planes; pln++) {
            p = new PlanesWalker(planesStart() + planePadding, (const byte *const) image);
            planePadding += p->sizeInBytes;
            for (ui16 y = 0; y < height; y++) {
                for (ui16 x = 0; x < width; x++) {
                    byte b = pln ? *(buffer + (x + y * width)) : 0;
                    b = (b << 1) | p->nextPixelColor();
                    *(buffer + (x + y * width)) = b;
                }
            }
            delete p;
            p = NULL;
        }
        for (ui16 y = 0; y < height; y++) {
            for (ui16 x = 0; x < width; x++) {
                const byte c = color(*(buffer + (x + y * width)));
                *(buffer + (x + y * width)) = c;
                if (c == 0) hasAlpha = true;
            }
        }
        return buffer;
    }
} File;
typedef struct Drawable {
    byte width;
    byte height;
    byte hasAlpha;
    lv::octet *decompressed;
    Drawable(const byte *const data) {
        File *parser = new File(data);
        width = parser->width;
        height = parser->height;
        decompressed = parser->decompress();
        hasAlpha = parser->hasAlpha;
        delete parser;
        parser = NULL;
    }
    void draw(const byte x, const byte y) {
        lvDisplay.blit(lv::Region( x, y, width, height), decompressed);
    }
    void draw(const lv::Region src, const lv::Point dest) {
        lvDisplay.blit(
            src, dest, decompressed, lv::Size(width, height)
        );
    }
    ~Drawable() {
        free(decompressed);
        decompressed = NULL;
    }
} Drawable;
}
#endif
namespace PNG {
const unsigned char raw_guys[] = {0x62,0x6b,0x0,0x1a,0x16,0x11,0x1,0x68,0x0,0x1a,0xa1,0xd,0x42,0xd0,0x1c,0x50,0xb4,0x5,0x86,0x97,0x49,0xa2,0x26,0x9b,0x22,0x65,0x23,0x69,0x60,0xd8,0x8d,0x54,0x95,0x55,0x55,0x45,0x55,0x55,0x44,0x55,0x55,0x23,0x60,0xc0,0x8d,0x55,0x35,0x2d,0x55,0x32,0x55,0x55,0x11,0x55,0x55,0x15,0x83,0x75,0x54,0xd5,0x11,0x55,0x25,0x55,0x55,0x44,0x22,0x55,0x40,0x40,0x69,0x34,0x89,0x54,0x92,0x22,0x22,0x65,0x45,0x69,0x1,0xc9,0x0,0x23,0xa2,0xe,0x47,0x29,0xd1,0x10,0x95,0x47,0x69,0x3,0x55,0x43,0x10,0x84,0x29,0xf,0x54,0x65,0x54,0xd,0x55,0x56,0x9a,0x67,0x23,0x68,0x89,0x26,0x42,0x99,0x54,0x8d,0xa2,0x22,0xa6,0x1b,0x55,0x25,0x55,0x8,0x47,0x55,0x55,0x54,0xd5,0x19,0x55,0x55,0x55,0x53,0x45,0x41,0xa2,0x24,0xd5,0x50,0x84,0x52,0x55,0x55,0x53,0x54,0x62,0xd5,0x4b,0x54,0x91,0x8,0x1a,0x44,0x4d,0x55,0x24,0x44,0x45,0x55,0x55,0x54,0xd5,0x53,0x55,0x55,0x44,0x55,0x44,0x54,0x1a,0x44,0x44,0x69,0x24,0x44,0x52,0x48,0x92,0x64,0x55,0x4d,0x54,0x8c,0x95,0x52,0xa2,0xe,0x1,0x80,0x5,0x50,0x94,0x2d,0x8d,0x41,0x64,0xd0,0x39,0x41,0x54,0x3d,0x5,0x90,0x3e,0x4d,0x55,0x4a,0x44,0x45,0x49,0xda,0x69,0x52,0x64,0x4d,0x48,0xd8,0x2e,0x4d,0x55,0x34,0x55,0x55,0x54,0xd1,0x55,0x55,0x53,0x4d,0x55,0x55,0x2,0xd4,0xd5,0x52,0x46,0x55,0x55,0x25,0x32,0x26,0x95,0x34,0xd5,0x55,0x50,0x2d,0x4d,0x55,0x51,0xd5,0x55,0x35,0x49,0x52,0x69,0x53,0x4d,0x55,0x55,0x2,0xd2,0x22,0x54,0xa5,0x22,0x25,0xb4,0x88,0xe4,0x64,0x25,0x55,0x26,0x0,0x24,0x94,0x83,0x91,0xca,0x74,0x44,0x25,0x51,0xda,0x40,0xd5,0x50,0xc4,0x21,0xa,0x43,0xd5,0x19,0x55,0x3,0x55,0x55,0xa6,0x99,0xc8,0xda,0x22,0x49,0x90,0xa6,0x55,0x23,0x68,0x88,0xa9,0x86,0xd5,0x49,0x55,0x42,0x11,0xd5,0x55,0x55,0x35,0x46,0x55,0x55,0x55,0x54,0xd1,0x50,0x68,0x89,0x35,0x54,0x21,0x14,0x95,0x55,0x54,0xd5,0x18,0xb5,0x52,0xd5,0x24,0x42,0x6,0x91,0x13,0x55,0x49,0x11,0x11,0x55,0x55,0x55,0x35,0x54,0xd5,0x55,0x51,0x15,0x51,0x15,0x6,0x91,0x11,0x1a,0x49,0x11,0x14,0x92,0x24,0x99,0x15,0x53,0x55,0x23,0x25,0x54,0xa8,0x83,0x80};
Prips::Drawable *guys;
};
int frame;
#ifndef PRIPS_DECODER
#define PRIPS_DECODER
#define PRIPS_FILE_VERSION 		0b01
#define PRIPS_FILE_SIGNATURE 	0b01100
#include <math.h>
#include <stdlib.h>
namespace Prips {
typedef unsigned char byte;
typedef unsigned short ui16;
typedef unsigned int ui32;
typedef struct PlanesWalker {
    ui32 byteStart;
    ui32 sizeInBytes;
    const byte *const image;
    ui32 cursor;
    ui32 currentByte;
    ui32 buffer;
    ui32 rleBuffer;
    ui32 currentColorBit;
    PlanesWalker(ui32 _byteStart, const byte *const _image) : byteStart(_byteStart), image(_image) {
        rewind();
    }
    void rewind() {
        buffer = 8;
        cursor = byteStart;
        currentByte = *(image + cursor);
        sizeInBytes = advance();
        goToNextByte();
        sizeInBytes += cursor - byteStart;
        pickFirstBit();
        rleBuffer = advance();
    }
    inline ui32 nextPixelColor() {
        if(--rleBuffer == 0) {
            rleBuffer = advance();
            currentColorBit = !currentColorBit;
        }
        return currentColorBit;
    }
    inline void pickFirstBit() {
        currentColorBit = (currentByte & 0x80) >> 7;
        currentByte <<= 1;
        buffer--;
    }
    inline void goToNextByte() {
        currentByte = *(image + ++cursor);
        buffer = 8;
    }
    ui32 advance() {
        ui32 bit = 0;
        ui32 number = 0;
        ui32 count = 0;
        ui32 counting = 1;
        do {
            bit = (currentByte & 0x80);
            currentByte <<= 1;
            buffer--;
            if(!buffer) goToNextByte();
            if (counting) {
                if(!bit) count++;
                else counting = false;
            }
            if (!counting) {
                number |= bit == 0 ? 0 : 1;
                if(count-- == 0) break;
                else number <<= 1;
            }
        } while (true);
        return number;
    }
} PlanesWalker;
typedef struct File {
    byte planes;
    byte available;
    byte hasAlpha;
    ui16 width;
    ui16 height;
    const byte *const image;
    PlanesWalker *p;
    File(const byte *const _image) : image(_image) {
        byte headerHigh = *(image + 0);
        byte headerLow  = *(image + 1);
        available = (headerHigh & 0b11111000) >> 3 == PRIPS_FILE_SIGNATURE;
        available = available && (headerLow & 0b11000000) >> 6 == PRIPS_FILE_VERSION;
        if (!available) return;
        planes 	= (byte) (headerHigh & 0b00000111);
        width 	= pow(2, 2 + ((byte) (headerLow & 0b00111000) >> 3));
        height 	= pow(2, 2 + ((byte) (headerLow & 0b00000111)));
        p = NULL;
    }
    inline ui32 planesStart() {
        return 2 + pow(2, planes); // 2 bytes header + (n * colors)
    }
    unsigned short color(ui16 index) {
        return *(image + (2 + index)); // 2 bytes header + (n * colors)
    }
    byte* decompress() {
        if (!available) return NULL;
        byte *buffer = (byte*) malloc(height * width * sizeof(byte));
        ui32 planePadding = 0;
        hasAlpha = false;
        for(ui16 pln = 0; pln < planes; pln++) {
            p = new PlanesWalker(planesStart() + planePadding, (const byte *const) image);
            planePadding += p->sizeInBytes;
            for (ui16 y = 0; y < height; y++) {
                for (ui16 x = 0; x < width; x++) {
                    byte b = pln ? *(buffer + (x + y * width)) : 0;
                    b = (b << 1) | p->nextPixelColor();
                    *(buffer + (x + y * width)) = b;
                }
            }
            delete p;
            p = NULL;
        }
        for (ui16 y = 0; y < height; y++) {
            for (ui16 x = 0; x < width; x++) {
                const byte c = color(*(buffer + (x + y * width)));
                *(buffer + (x + y * width)) = c;
                if (c == 0) hasAlpha = true;
            }
        }
        return buffer;
    }
} File;
typedef struct Drawable {
    byte width;
    byte height;
    byte hasAlpha;
    lv::octet *decompressed;
    Drawable(const byte *const data) {
        File *parser = new File(data);
        width = parser->width;
        height = parser->height;
        decompressed = parser->decompress();
        hasAlpha = parser->hasAlpha;
        delete parser;
        parser = NULL;
    }
    void draw(const byte x, const byte y) {
        lvDisplay.blit(lv::Region( x, y, width, height), decompressed);
    }
    void draw(const lv::Region src, const lv::Point dest) {
        lvDisplay.blit(
            src, dest, decompressed, lv::Size(width, height)
        );
    }
    ~Drawable() {
        free(decompressed);
        decompressed = NULL;
    }
} Drawable;
}
#endif
namespace PNG {
const unsigned char raw_logo_senac[] = {0x65,0x6d,0x0,0x17,0x1,0x14,0x18,0xe,0x16,0x15,0x19,0x7,0xf,0x10,0xb,0x6,0x1e,0xd,0xc,0x2,0x1f,0x3,0x4,0x1b,0x1c,0xa,0x9,0x1d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8c,0x0,0x0,0xa,0x39,0x80,0x81,0x81,0xf9,0x52,0x40,0x76,0x6a,0x7,0x86,0xa0,0x49,0x82,0xdd,0xe0,0x79,0x93,0xe0,0x47,0x82,0xc5,0xa4,0x7,0x98,0x1f,0x95,0xf8,0x1d,0xe6,0x60,0x2e,0xe3,0x46,0x81,0x8d,0x8c,0x1e,0x6,0x26,0x34,0xc1,0xf8,0x44,0x24,0x68,0x20,0x63,0x75,0x16,0x3e,0x5b,0x8e,0x8,0x19,0x1,0x2d,0x35,0x45,0xf,0x29,0x27,0x81,0xb4,0x83,0x60,0x6d,0x20,0x2a,0x60,0x50,0x42,0x10,0x79,0xa4,0x4,0xf4,0x4,0x73,0x83,0x6,0xb,0x21,0x93,0x87,0xf8,0x4e,0xa1,0x8,0x52,0x18,0x12,0x4,0x8,0x4a,0x8,0xc4,0x82,0xe8,0x49,0x16,0x24,0xc1,0xf5,0x30,0x30,0xea,0x1c,0x74,0x1f,0x16,0xb,0xdf,0x9a,0x2e,0xb,0x4,0x85,0x51,0x25,0x8f,0x4e,0x68,0x39,0x14,0x14,0x4b,0x91,0xa5,0x44,0x72,0x2a,0x69,0x67,0x82,0x49,0x85,0x5,0x14,0xba,0xd2,0x45,0x44,0xbb,0x9a,0x22,0xa,0x8b,0x61,0x56,0xd6,0x12,0x96,0x23,0x43,0xb9,0x61,0xc2,0xd8,0x5a,0xc8,0xaf,0x8c,0xd3,0xf9,0xe0,0xc7,0x4e,0x16,0xa2,0xd0,0x41,0x3a,0x5a,0xe0,0x57,0x84,0x27,0x64,0x9a,0x5,0xe9,0x6e,0x91,0xf8,0x4e,0x5,0xaa,0x54,0x3a,0x17,0x81,0x3a,0x6d,0x39,0xe0,0x45,0x83,0x6,0x44,0x9,0x34,0x5,0x35,0xe5,0x21,0xbf,0x4a,0x4a,0x81,0x84,0xdb,0xd2,0x26,0xc4,0xc,0x47,0xd0,0x21,0x40,0xa5,0x3e,0x9a,0x3c,0x98,0x52,0xa3,0xe1,0x8,0x35,0x78,0x84,0xa1,0xf4,0x44,0xd0,0xca,0x82,0xc4,0x4a,0xf5,0x7d,0x6,0x9a,0xa6,0x90,0x19,0x59,0xee,0xa2,0x20,0x60,0xba,0x8a,0x4a,0x2e,0x6,0x44,0x22,0x2,0x3,0x59,0x60,0x7f,0x97,0x40,0x70,0x91,0x11,0xe0,0x65,0x8a,0xb4,0xed,0x80,0x7,0x35,0x0,0x0,0x48,0xa0,0x0,0x23,0x8,0x3b,0xa6,0x18,0x6c,0x81,0x78,0x4a,0x92,0x9e,0x1e,0x28,0x10,0x2b,0x9a,0xaa,0x13,0x84,0x28,0xa0,0x8a,0x9,0x90,0x2e,0x10,0x1f,0x82,0x5f,0x40,0xa8,0x50,0x7a,0x9,0xee,0xa,0x5,0x86,0xa5,0x82,0x89,0x50,0xa8,0x5f,0x12,0x1c,0x82,0x78,0xa8,0x4a,0x12,0x14,0x1c,0x92,0xa,0x6a,0x12,0xb9,0x22,0x45,0x81,0x32,0x9,0x71,0x81,0xbb,0x82,0xe8,0x51,0x12,0x61,0xc1,0xdb,0x82,0x48,0x84,0x1a,0x94,0x60,0x22,0x81,0x2e,0x41,0x16,0x9,0x20,0x43,0x44,0xb1,0x81,0x84,0x5,0x8,0x81,0x61,0x9,0x8a,0x2a,0xd,0xb8,0x4f,0x12,0x15,0x12,0x36,0x4,0x29,0x5,0x8d,0x94,0x68,0x10,0x74,0x38,0x58,0x48,0xb3,0x1,0x12,0x92,0x88,0xc5,0x1e,0x31,0x1,0x2a,0xd5,0x8a,0x12,0x2a,0x5,0xa5,0xe2,0x8d,0x88,0x6e,0x5,0xb,0xbc,0xa2,0xd,0x88,0x49,0x82,0x9b,0x82,0x54,0xea,0x2c,0xc4,0x45,0x54,0xd0,0x14,0xf4,0x2f,0x29,0x25,0xa4,0xe9,0x1,0x42,0x8a,0x23,0x65,0x95,0x2b,0x9a,0x5,0x39,0x6a,0xd0,0xcd,0xa8,0x17,0x74,0x30,0x84,0x54,0xee,0x6,0xb6,0x23,0x8a,0xea,0x21,0x2,0x71,0x0,0xd7,0xa5,0x48,0x82,0x48,0x9,0xc2,0x76,0x41,0xc4,0x8d,0x79,0x1a,0xd0,0x99,0xc8,0x3e,0x60,0xb1,0x99,0x7,0x4,0x99,0x3d,0x58,0x45,0x4,0xba,0x8b,0x1f,0x29,0x47,0x4,0x17,0xac,0x4b,0xa4,0xa,0xe5,0xb6,0x93,0xab,0x87,0x94,0x8c,0xa9,0x24,0xca,0x42,0x87,0xa6,0x69,0x39,0x64,0x86,0x63,0x75,0x20,0xf8,0x72,0x69,0x89,0x99,0x82,0x49,0x66,0xa8,0xf9,0xd0,0x72,0xaa,0x98,0x98,0x8b,0x61,0x1a,0x62,0xe4,0x25,0x11,0x39,0xd0,0x4e,0x58,0xc9,0xe,0x32,0x11,0xa9,0xdf,0x35,0x83,0x68,0x86,0x25,0x37,0xe3,0xa7,0x52,0x9,0x82,0xee,0x32,0x17,0x92,0x30,0x9e,0x7e,0x68,0x42,0x68,0x45,0xd,0x6a,0xf8,0x47,0x20,0xd4,0x44,0x49,0xb6,0x99,0x63,0x20,0x81,0x9,0x84,0x61,0x12,0xc,0x9e,0x58,0x41,0x4,0x13,0x8a,0x4e,0xf8,0x46,0x11,0xe2,0xe4,0xae,0x79,0x60,0x43,0xe2,0x88,0x6b,0x99,0x1a,0xf8,0x86,0x48,0x61,0x4,0x65,0x82,0xb,0xb9,0x50,0xa8,0xe9,0xa0,0xce,0x7e,0x1b,0x54,0x78,0x10,0xa1,0xa9,0x2d,0xf,0x8e,0xe3,0x20,0x8e,0x1d,0x9a,0xa4,0x44,0x95,0x61,0x8,0x3f,0x8f,0x96,0x43,0x89,0xab,0xee,0x68,0x4e,0x36,0x64,0xb9,0x2a,0x18,0x96,0xf3,0xa2,0x27,0x4a,0xb8,0x4a,0x4,0x3a,0xaa,0xf3,0x32,0x92,0xcd,0x84,0xa0,0x48,0x47,0xf4,0x8c,0xaa,0x4d,0x81,0x3a,0x2e,0x56,0xaa,0x92,0xba,0x92,0x17,0x82,0xb8,0xe8,0x54,0xa9,0xe3,0x23,0x60,0xbe,0xb,0x48,0x42,0x39,0x66,0x8a,0xa4,0x5e,0x1c,0x89,0x84,0xe1,0x84,0x9c,0xa4,0x88,0xe9,0x75,0x10,0x14,0x81,0x4,0xc6,0xc5,0xa3,0x44,0x9,0x88,0xe9,0x67,0x83,0x80,0x4a,0x13,0xd5,0x1c,0x58,0x37,0x17,0xc5,0x24,0x1f,0xa2,0x26,0x4e,0xa,0xe2,0x1a,0x25,0x7a,0x85,0xe3,0xb4,0xd2,0x78,0xaa,0xb8,0x20,0xd6,0xd0,0x22,0xb8,0x84,0x79,0x50,0xcb,0xe5,0x58,0x42,0x78,0xf4,0x64,0x15,0x8b,0x9e,0x64,0x36,0x78,0x20,0x41,0x14,0x1c,0xa5,0x46,0xa8,0x51,0x38,0x4a,0x11,0x43,0x62,0x21,0x18,0xfa,0xa9,0x26,0x26,0x32,0xe4,0x40,0x53,0x93,0xd1,0x28,0xa2,0xe1,0x14,0x1a,0x82,0xb9,0x27,0x23,0x69,0x38,0xc3,0x50,0x5d,0x2,0xfa,0x92,0xd2,0x72,0x92,0x15,0x26,0x0,0x58,0x8,0x1,0x1c,0x60,0x3f,0xd0,0x3,0xf7,0x87,0xa0,0x53,0x80,0x20,0x58,0x6,0x12,0x2,0x92,0x4,0xa8,0xa,0x88,0x0,0x83,0x20,0x0,0x7e,0x60,0x0,0x20,0xa6,0x48,0xfb,0x30,0x84,0x62,0x55,0x89,0xea,0x24,0x72,0xb1,0x1,0x39,0x61,0x12,0x65,0xae,0x42,0x6e,0x4b,0xba,0x54,0x94,0xd3,0x29,0x5,0xe,0xaa,0x4a,0x3c,0x40,0xf4,0x96,0xe2,0x2a,0xad,0xa2,0x36,0xa6,0x16,0x12,0x44,0x8e,0x10,0x54,0xa7,0x6d,0x51,0x7a,0x2e,0xf9,0xd6,0x24,0x48,0x47,0x49,0xe,0x16,0x46,0xae,0xd2,0xcc,0x22,0x44,0x31,0x89,0xce,0x12,0xea,0x37,0x16,0x42,0x2b,0xf4,0x75,0x6a,0x95,0x8d,0x89,0x14,0x15,0xe3,0x47,0x99,0x2e,0x93,0x26,0x44,0xed,0x58,0x94,0x20,0x58,0x43,0xf6,0x34,0x71,0x8e,0xbf,0xad,0x6d,0x28,0xf8,0xa1,0x41,0x39,0x50,0xe1,0xca,0x91,0xd4,0xb2,0x89,0x6e,0x64,0x28,0x48,0x56,0x16,0x1a,0xfa,0xa5,0xaa,0xce,0xea,0xa2,0xa3,0xe,0x14,0xa8,0xe2,0xa1,0xc8,0x4a,0x69,0xcd,0x6e,0x49,0xa3,0xc,0x36,0x8,0x7,0x90,0x41,0x31,0x73,0x1a,0xe2,0xc4,0xc,0x61,0xd0,0x93,0x11,0x65,0x12,0xb4,0x45,0xe2,0x2c,0xc3,0xc,0x27,0x8d,0xb,0x10,0xff,0x68,0x42,0xb2,0x38,0xc3,0xc,0x30,0x64,0x2e,0x53,0xac,0x7e,0xa4,0x8d,0x30,0xa3,0x8e,0xc8,0x70,0xbe,0xc5,0x2f,0xf2,0x62,0xb8,0x93,0xb,0x20,0x88,0x98,0x80,0xd1,0x85,0x13,0xfb,0x89,0x8b,0x28,0x83,0x8,0x28,0xcc,0x10,0x13,0x12,0xd2,0x6a,0x22,0x2c,0xa7,0x31,0x45,0x8b,0x4,0x84,0x14,0xe9,0x28,0x98,0xa3,0xe4,0x90,0x22,0x39,0x42,0x71,0x64,0x14,0xd4,0x82,0x22,0x4c,0x88,0x9,0xaf,0x9,0xc5,0x10,0x43,0xa4,0x26,0x7c,0xdc,0xb4,0x9,0x70,0x42,0x44,0x23,0x28,0xec,0xcc,0xb4,0x9,0x67,0x2a,0xb,0x1e,0xba,0xf9,0xa6,0x32,0x52,0x76,0xa,0x9a,0x34,0x28,0x46,0xb4,0x44,0x69,0x4a,0x42,0xf2,0x11,0x87,0xe6,0x36,0x79,0x10,0xd2,0x5d,0x29,0x6c,0xc4,0x2f,0x25,0x82,0x66,0x41,0x49,0xa1,0xa4,0x4e,0xfd,0x14,0xe4,0x2a,0x11,0x60,0x94,0x3e,0x2b,0x52,0x14,0x59,0x9,0xc5,0x50,0xd8,0x60,0x12,0x90,0x20,0xd3,0x7a,0xcd,0x4b,0xd4,0x96,0xa0,0x98,0x41,0x6,0x10,0x37,0xb7,0x4a,0x91,0x24,0xd1,0xc9,0x87,0x87,0x27,0x64,0x1c,0x41,0x39,0xbe,0x44,0x42,0xbc,0x94,0x1a,0xb,0x23,0x90,0x70,0x4a,0xf5,0x49,0x2c,0x87,0xab,0x84,0xb4,0x2c,0x72,0x29,0x47,0x4,0xd,0xb5,0x54,0xaa,0x8d,0x12,0x36,0x69,0xa5,0xcd,0x6a,0xad,0x7,0x57,0x69,0xf6,0x69,0xb9,0x5a,0x89,0x46,0x9a,0x59,0x15,0x22,0x93,0x23,0x84,0x64,0xe7,0x4b,0x46,0xb9,0x25,0xd6,0x25,0xc,0x95,0xa,0x44,0x90,0xf8,0x4a,0x93,0x86,0x2f,0xc8,0x3a,0x69,0x67,0x4c,0x89,0xd1,0x10,0x61,0x51,0x91,0x9b,0x4b,0x49,0xf4,0xd0,0xb4,0x36,0x58,0x54,0x45,0xa8,0xba,0xfb,0x5e,0x67,0x92,0x42,0x4,0xa7,0xde,0x88,0x92,0x5b,0x29,0x9b,0xd0,0xe4,0xdd,0x2f,0x64,0x46,0x10,0x19,0x6c,0x50,0x9e,0x30,0xaf,0x45,0x94,0xde,0xea,0x54,0x25,0x50,0xa8,0x45,0xb1,0x75,0x41,0x62,0x9a,0x64,0xc8,0xa7,0x9b,0x44,0x97,0x92,0x14,0xd1,0x99,0x2e,0x2d,0x65,0xd6,0x2c,0x81,0xd,0xd0,0x4d,0xb,0xda,0xf4,0x9a,0x49,0x4,0x11,0xeb,0x8a,0x46,0xe4,0x91,0x74,0x90,0x8b,0x84,0x62,0xe8,0xb9,0x25,0x8e,0x98,0xa4,0x2a,0x5a,0x4a,0x2b,0x9a,0x9b,0xa4,0x35,0x8,0x6c,0xc2,0x65,0x89,0x44,0x89,0xe3,0x2e,0x26,0x96,0xbd,0x39,0x62,0xd0,0xe4,0x99,0x2f,0x8c,0xd3,0xb9,0x55,0x8,0x54,0x78,0x27,0x89,0x95,0xd,0xe3,0xe9,0x16,0xd6,0x36,0x25,0x92,0x11,0x8c,0x88,0xba,0x92,0x44,0xaa,0xe2,0x67,0xd7,0xb6,0x6a,0x89,0x49,0x2,0xc5,0xac,0xca,0xea,0x31,0x68,0x9f,0x34,0xbb,0x45,0x5a,0xc9,0xd3,0x9a,0x90,0xc3,0x6e,0x98,0xe3,0x88,0x66,0x2a,0x49,0x69,0xd2,0xd3,0xec,0x9f,0x26,0x13,0x3d,0x42,0x93,0x9e,0x92,0x52,0xd2,0x49,0x35,0xcd,0xb6,0x57,0xd1,0xae,0x28,0x23,0x1b,0x39,0x48,0xae,0xa9,0xd2,0xc8,0xb5,0x15,0x8a,0xb9,0x10,0xe0,0xfc,0xe5,0x22,0xd9,0x8,0xaa,0x8d,0x5a,0xed,0x24,0x78,0x88,0xf0,0x9a,0x71,0xc5,0x7a,0x21,0x16,0xab,0xe2,0x14,0x8a,0x52,0x3c,0x96,0x3c,0xbd,0x44,0x18,0x79,0x1a,0xc8,0x84,0x48,0xc8,0xfb,0x5b,0xa5,0xa7,0x64,0x58,0xb6,0x63,0xe2,0x31,0x84,0x6b,0x22,0xa,0x72,0x91,0x5f,0xe9,0x49,0x52,0x89,0x62,0x4c,0xa4,0xa1,0x59,0x52,0xc8,0x82,0x92,0x9b,0x7a,0x44,0xd8,0x84,0x26,0x23,0xa5,0x99,0xc5,0x99,0x2c,0x8c,0x30,0x8c,0x9b,0x91,0x5,0xe2,0x75,0x47,0x34,0x41,0x95,0x48,0x83,0xb7,0x14,0xf2,0xaa,0x41,0x6e,0x95,0x22,0x26,0x9e,0x55,0x56,0x41,0xb5,0x37,0x10,0xa8,0x95,0xea,0xf8,0x46,0x79,0x55,0x34,0x8b,0x9d,0xa9,0x52,0x76,0x54,0x8b,0x5e,0xae,0x82,0xa2,0x96,0xd1,0x9e,0x5a,0xa4,0x90,0x82,0x64,0x4b,0x5e,0xc8,0x53,0x47,0xa3,0x2f,0x62,0xd6,0x5b,0x69,0x12,0x54,0x32,0xb2,0x14,0x51,0x35,0x2a,0x48,0x7e,0x85,0xa,0xa4,0xd5,0xf9,0x58,0x59,0xc6,0x3f,0x5f,0x2d,0xb2,0x72,0xb3,0x22,0x89,0xd2,0x49,0x56,0xab,0x2c,0x86,0x2d,0x16,0x9f,0x48,0x76,0x75,0xac,0x64,0x48,0xbe,0x59,0x65,0x2f,0x22,0x9d,0xcc,0x4b,0x16,0x84,0xa,0xa6,0x7b,0x10,0x32,0x21,0xa8,0xd2,0x3b,0xa7,0xcb,0x21,0xa9,0x26,0xa9,0xd4,0x84,0x4c,0xc8,0xf8,0x4f,0xea,0x4a,0x69,0xdb,0x73,0xe9,0xf5,0x9a,0x92,0x9b,0x35,0x75,0x1e,0x0,0x54,0xc3,0x1,0xe4,0x48,0x1d,0xd5,0x4a,0x2,0x5,0x1,0xc8,0x50,0x1c,0xc2,0x20,0x6a,0x70,0xb8,0x19,0x2,0x80,0x6d,0x51,0x80,0x73,0x16,0x7,0x61,0x0,0x79,0x20,0x1e,0x52,0x40,0x7a,0x20,0x1f,0x18,0x1f,0x50,0x1f,0x50,0x1f,0xa0,0x6a,0x30,0x2c,0x81,0x30,0xe0,0xa4,0xa0,0x4a,0x22,0x46,0x31,0x8c,0x72,0x10,0xe0,0x4a,0x20,0x91,0x2c,0x41,0x8c,0x8a,0x4,0xc2,0x8,0x23,0x13,0x29,0xc9,0x20,0x13,0xcc,0x56,0x53,0x91,0x88,0x10,0x5,0x1,0x10,0x81,0x1a,0x1c,0x5,0x33,0x47,0x91,0xc7,0x81,0x54,0x28,0x47,0x23,0x72,0x1,0x3e,0x63,0x88,0x21,0xc,0x57,0x28,0x13,0x48,0xc9,0x29,0x88,0x47,0x24,0xa8,0xa0,0x4c,0x16,0x8a,0x52,0x11,0xc5,0x33,0x1,0x30,0xe6,0x65,0x21,0x1a,0x22,0x65,0x20,0x0,0x82,0x50,0x0,0x73,0x60,0x0,0x20,0x84,0xc9,0x9,0x4a,0x89,0x48,0xee,0xac,0x4e,0xdc,0x28,0xac,0x40,0xc2,0x54,0xb0,0xb2,0x3b,0x23,0xe4,0xad,0xa5,0x4f,0x9,0x98,0x50,0xa2,0x7e,0x83,0x33,0x57,0x74,0xaa,0xc5,0x4d,0x8,0x66,0x16,0x28,0x44,0x15,0x9a,0x9b,0x7c,0x84,0x9,0x9,0x12,0x2c,0xef,0xc,0xa7,0x27,0x97,0xd4,0xf2,0xa4,0xc7,0x89,0xce,0x30,0xcc,0x10,0xba,0xda,0xc5,0xb2,0x88,0x14,0x2c,0x50,0xe3,0xf0,0xdc,0xb5,0x56,0x67,0x27,0x69,0x2b,0x11,0x89,0x16,0x3f,0x6c,0x3b,0x24,0xaa,0xc7,0x6f,0x8,0xa,0x14,0x10,0x13,0xe,0x5a,0x2d,0x26,0x41,0x33,0xb1,0x22,0xc4,0x84,0x81,0x35,0x4e,0x94,0x91,0x32,0x2c,0x56,0x30,0xe1,0x50,0x4b,0x51,0x30,0x8c,0x97,0xc8,0x38,0xc1,0x70,0x53,0x10,0xb0,0x87,0x2e,0x90,0xc1,0x1,0x80,0x53,0x11,0x71,0xa9,0x49,0x28,0x8b,0x30,0x72,0x81,0x79,0x7,0x15,0x26,0x30,0xc1,0xd0,0x62,0x61,0xba,0x23,0x8b,0x30,0xa8,0x64,0x12,0x44,0xc9,0xc2,0x4a,0x24,0xc1,0x78,0xa7,0x4,0x91,0x48,0x54,0xd2,0xb,0x28,0x88,0xd2,0x89,0x70,0x4b,0x15,0xa5,0x71,0x62,0xca,0x13,0x30,0xd4,0x40,0x5c,0xe9,0x21,0x38,0xa3,0xa2,0x48,0x90,0xd8,0x92,0x30,0x9c,0x32,0xd4,0x68,0x93,0x13,0xd,0x89,0x50,0x5e,0xea,0xc4,0x1f,0x37,0x46,0xc,0x89,0xfb,0x4,0x82,0x31,0x87,0xcc,0xe9,0x30,0xd8,0x9f,0x70,0x4c,0x9a,0xb1,0x6,0x21,0x37,0xac,0x3a,0x28,0x14,0xd2,0xd2,0x48,0xb9,0x48,0x6a,0xae,0x44,0xc2,0xc2,0x81,0x6d,0xd3,0x26,0xca,0x64,0x4e,0xa4,0xd,0x8a,0x4,0x93,0x39,0x69,0xb3,0x97,0x5e,0x24,0x38,0x24,0x15,0x2a,0xc8,0x43,0x8,0x5a,0xee,0x20,0x64,0x70,0x90,0x74,0x25,0x65,0x92,0x16,0x17,0x62,0x42,0xc4,0x5,0xa4,0x85,0xa8,0xc2,0x58,0x90,0xea,0x70,0xa9,0x45,0xa,0x42,0x48,0x2a,0x25,0x8a,0xe,0x23,0xc1,0x22,0xf6,0x49,0x18,0xad,0x6b,0x62,0x9c,0x34,0xb7,0x4,0x9e,0xf5,0x52,0x28,0x98,0x96,0x27,0x34,0x72,0x77,0x15,0xf,0xf5,0x2d,0x48,0x91,0xb8,0x94,0x30,0xd1,0x84,0xe2,0xd9,0x9c,0x2d,0xdd,0x2a,0xc4,0x14,0xa7,0x43,0x4d,0x2a,0x23,0xad,0xb6,0x88,0x7c,0x25,0x76,0xcb,0x51,0xae,0xad,0x38,0xb3,0x4a,0x95,0x4,0x88,0xdb,0x9,0x5c,0xa8,0x99,0xa5,0x42,0xca,0x30,0xd2,0xa2,0xcb,0x62,0x8,0x31,0x42,0x1c,0xa2,0xd2,0x12,0xc5,0xb,0x36,0xea,0x49,0xa2,0x88,0x2c,0x21,0xe4,0xba,0xb2,0xc7,0x44,0x8b,0x23,0x26,0x72,0xdf,0x18,0x6b,0xcb,0x13,0x25,0xe4,0x65,0x2d,0x37,0x10,0x2c,0xf6,0x11,0xf0,0x8a,0x15,0x17,0x54,0x5d,0x91,0x7d,0xc9,0xcc,0x2c,0xea,0xb5,0x91,0xdf,0x12,0xb2,0x2a,0xc5,0x44,0x94,0x8e,0xad,0x71,0x11,0x2,0xe2,0xd3,0x4e,0xdf,0x12,0x8c,0x97,0x34,0x9d,0xe8,0x4b,0x74,0x94,0x4c,0xe2,0xc5,0xe2,0x9,0x7c,0x6b,0x41,0x42,0x37,0x32,0xac,0xb1,0xa,0x88,0x2c,0xc5,0x47,0x2c,0xb7,0x1f,0xcf,0xa6,0xab,0x98,0x5a,0xd7,0xb5,0x7d,0xb,0x1a,0xd3,0x24,0xb2,0x44,0xa6,0x5f,0xa1,0x53,0xd2,0x13,0xa,0x8a,0x2d,0x22,0xa1,0x32,0xc4,0xd4,0xa4,0x37,0x4c,0x93,0xce,0xd5,0x42,0x16,0x28,0x4d,0x57,0x52,0x2d,0xdc,0xb2,0x5b,0xd7,0xa5,0xfd,0x21,0x1a,0xbc,0x47,0x2c,0xc2,0x45,0x22,0x51,0x3e,0x4c,0x66,0xf4,0xbc,0x82,0x63,0x93,0xae,0x9c,0xdb,0x42,0x8d,0x7d,0x35,0xc,0x2a,0xb3,0x23,0x4d,0x4a,0x93,0xd9,0x3e,0xbc,0x50,0x91,0x50,0x45,0x44,0xcf,0x5e,0x91,0x12,0x37,0x4c,0xaf,0xcf,0x78,0x90,0x61,0xfd,0x33,0x54,0xba,0x4f,0x6b,0x24,0xb7,0x22,0x28,0x90,0x4f,0x11,0xcc,0x89,0x4b,0xed,0x52,0x76,0x92,0x3d,0x77,0x30,0x90,0x9f,0xa1,0xd1,0x15,0x2d,0x91,0x7c,0xfa,0xe9,0x4b,0xc9,0x92,0xcc,0x24,0x54,0x43,0x68,0x64,0x91,0x93,0xa7,0x32,0x72,0x73,0x2d,0x25,0x37,0x8b,0x72,0xa2,0xd4,0xf1,0x72,0x54,0x31,0x27,0x29,0x39,0xba,0x5d,0x54,0x82,0x9c,0xf2,0xd4,0x91,0xb3,0xc3,0xb2,0xbc,0xda,0x44,0xd8,0x98,0x95,0xa,0xe8,0x29,0x4,0x28,0xca,0x9,0x2,0x91,0x10,0x84,0x15,0x45,0x25,0x23,0x30,0x91,0x9d,0x2f,0x14,0x9c,0x5c,0xd0,0xcc,0x42,0xa3,0xfd,0x6a,0x30,0x76,0x5d,0x34,0x9d,0x4c,0x91,0x96,0x8e,0x54,0x8b,0x5e,0xb6,0x82,0xa2,0x69,0x3c,0xb6,0xb3,0x72,0x21,0x45,0x62,0xec,0xf3,0xc7,0xa3,0x23,0x8a,0xb5,0x64,0xe5,0x48,0xf1,0x6e,0x9,0x12,0x8,0xa1,0x42,0x6a,0xab,0x6a,0x88,0xc2,0xa1,0x5f,0x45,0x14,0x86,0xc4,0x4a,0x2b,0x69,0x2a,0xfa,0xa9,0x34,0x6e,0xa7,0x58,0x20,0xf,0x9,0x5c,0xb2,0xc8,0x57,0x4b,0xe2,0x4e,0xee,0x1e,0xa2,0xc2,0x22,0xb1,0xd,0x22,0x22,0xca,0xae,0x9c,0x61,0xa9,0xe,0x52,0x20,0xc0,0xc3,0xc6,0xa1,0x68,0x90,0xa9,0x3a,0x4a,0x6c,0x3e,0x0,0x54,0xb3,0x1,0xe4,0x50,0x1d,0x46,0x80,0x81,0x81,0xc4,0x68,0x1c,0x42,0x60,0x69,0x50,0xb0,0x19,0x82,0x80,0x6c,0x51,0x80,0x73,0x14,0x7,0x61,0x20,0x79,0x28,0x1e,0xc,0x7,0xa2,0x81,0xe8,0xa0,0x7c,0x40,0x7d,0x40,0x7e,0x81,0xa8,0xc0,0xad,0x81,0x2c,0xe2,0x38,0x51,0x8,0x28,0x12,0x88,0xe6,0x39,0xe,0x72,0xb3,0x81,0x28,0x82,0x44,0xb1,0x6,0x34,0xc0,0x4c,0x29,0xc8,0xc9,0x2c,0x86,0x2c,0x80,0x4f,0x31,0x59,0x4e,0xc8,0x20,0x40,0x14,0x4,0x42,0x4,0x68,0x68,0x14,0xc2,0xe4,0x71,0xe0,0x55,0x10,0x20,0x84,0x39,0x4,0x1,0x3d,0x14,0xe2,0x8,0x43,0x90,0x48,0x13,0x4a,0x85,0x94,0x84,0x10,0x8b,0x28,0x13,0x5,0xa2,0x94,0x84,0x71,0x73,0x81,0x30,0x41,0x59,0x48,0x46,0xda,0x21,0x8,0x0,0x20,0x94,0x0,0x74,0xa0,0x0,0x20,0x7f,0x45,0x1f,0x14,0x74,0x77,0x56,0x2d,0xc4,0x8e,0x56,0x1a,0x9c,0x2e,0x21,0x1e,0xe5,0xee,0xeb,0xcc,0x69,0x8e,0x18,0xfd,0x30,0xc3,0x42,0x6e,0xf4,0x2a,0x44,0x88,0x46,0xd4,0xc2,0xe1,0x6c,0x2e,0x47,0x65,0xc8,0xb2,0x2d,0xb7,0x7c,0xeb,0x12,0x25,0x4,0x19,0x2,0xfb,0xb4,0x4a,0xa5,0x44,0xaa,0x2a,0x51,0x8c,0x4e,0x76,0x3c,0x88,0x34,0x4b,0x42,0x31,0x84,0x2f,0xb,0x8a,0x20,0x9a,0x93,0xe,0xbf,0x65,0xbb,0x56,0x5d,0x52,0xc4,0xc4,0x8b,0x28,0x95,0xa6,0x83,0x8f,0x49,0x2b,0xf3,0xa2,0x34,0x51,0x11,0x42,0x8e,0x25,0xcd,0xd,0x90,0xe4,0xf4,0x8e,0xa4,0xbb,0x34,0x58,0x91,0x22,0x5c,0x11,0xac,0xd7,0x51,0x84,0x5c,0x54,0x61,0xc5,0x8b,0xc1,0x1a,0x11,0xe8,0x6f,0x59,0x42,0x66,0x1a,0x2b,0x4,0x84,0x36,0x97,0x16,0x34,0x78,0x81,0x83,0x81,0x23,0x12,0x40,0x81,0xd2,0xc4,0x59,0x86,0xf,0xf0,0x44,0x41,0x1f,0x1b,0x5b,0x90,0x61,0x86,0x5,0x41,0x11,0x5,0xa1,0xda,0x34,0x59,0x85,0x5,0x65,0x4,0xc,0x45,0xd7,0x2c,0x67,0x12,0x61,0x63,0x22,0x64,0x4,0x2c,0x5c,0x45,0xcb,0x71,0x65,0x10,0x38,0xa3,0x41,0x13,0x15,0x48,0x89,0x44,0x45,0x94,0xe3,0x5,0xb,0x50,0x42,0x41,0x6a,0x71,0x31,0x42,0x24,0x90,0x22,0x38,0x11,0x10,0x41,0x69,0xc4,0x44,0x98,0xc0,0x9a,0x40,0x9c,0x59,0x1d,0x9d,0x42,0x19,0xa8,0xb4,0x9,0x74,0x82,0x31,0x64,0x54,0x72,0x47,0x66,0x52,0xd0,0x25,0x98,0x25,0x16,0x42,0x3f,0x90,0xd3,0x10,0x8c,0x9d,0x82,0x52,0xb3,0x21,0x31,0x64,0x92,0xa4,0x11,0x29,0x5,0x72,0x11,0x87,0xc1,0x31,0xf7,0xdc,0x96,0x52,0xc9,0xc9,0x60,0x96,0xc1,0x9,0xea,0xfa,0x31,0xc9,0x22,0x14,0x4,0x63,0x16,0xc8,0x59,0x84,0x3f,0x3f,0xd0,0xc8,0x14,0x59,0x6b,0x48,0xcd,0xa,0x45,0x8b,0x82,0x22,0x2,0xbc,0xd4,0x54,0x52,0x62,0x6f,0x63,0x21,0xc4,0xe1,0x52,0x88,0xdb,0xa9,0x56,0x76,0x89,0x44,0x60,0xa5,0x1e,0x8,0x93,0x91,0x24,0x91,0x4,0xc9,0x20,0xe5,0x86,0x6a,0xe0,0x88,0xe4,0x55,0x45,0x9a,0xa5,0x61,0x49,0xa5,0xcb,0x53,0xb8,0x78,0x94,0xdd,0x51,0xa6,0xe5,0x61,0x49,0xa5,0x91,0x38,0xac,0x8e,0x11,0x49,0x6e,0x4d,0x51,0x8a,0x43,0x69,0x5,0xf2,0x62,0x68,0x85,0x3e,0x11,0xb4,0xf8,0x59,0x25,0xcc,0x2a,0x79,0x67,0x92,0xd0,0x24,0xa4,0x3a,0x54,0xe6,0xc5,0x86,0x25,0x89,0x8b,0x11,0xea,0x2e,0xbe,0x22,0x7a,0x89,0x41,0x59,0xb6,0x9d,0xb7,0x93,0x66,0x65,0x43,0xb5,0x49,0x2f,0xe4,0x8f,0x9e,0x29,0x11,0xb5,0x38,0x9e,0x30,0xaf,0x45,0x94,0x41,0x64,0xb5,0x45,0xae,0x25,0xa,0x45,0x6c,0x5d,0x50,0x58,0xa6,0x99,0x36,0xf2,0xe4,0xf5,0xa4,0x69,0x22,0x91,0xd4,0x63,0xb8,0xb5,0x97,0x58,0xa2,0x94,0xa4,0x7c,0x84,0x88,0x95,0xa,0xa6,0xd2,0x51,0x14,0x10,0x47,0xae,0x28,0xa9,0x96,0x42,0x6d,0x8,0xb8,0x42,0x30,0x5b,0xbe,0x3a,0xd8,0x91,0x12,0x12,0xa5,0xd2,0x9d,0x99,0xe,0x88,0x18,0x3e,0x54,0x4b,0xe7,0xe5,0x6a,0xa9,0x8,0xaa,0xaf,0x4e,0x58,0x60,0x51,0x23,0xd5,0x90,0xb2,0x2a,0x71,0x88,0x87,0x87,0xa5,0xab,0x14,0x14,0x57,0xaf,0x72,0xd9,0x2f,0xe6,0x59,0x10,0x42,0x32,0x26,0x84,0x91,0x7e,0xe5,0x6d,0x4a,0xbd,0xbf,0xf4,0x79,0x38,0xae,0x58,0x65,0x22,0x49,0xb2,0x62,0xbc,0x8b,0x89,0x46,0x84,0xd,0xd3,0x9a,0x90,0xb3,0xec,0x8a,0x85,0x8c,0x90,0x8e,0x44,0x6b,0x74,0xaa,0x5b,0xd7,0xc9,0x84,0xcf,0xc3,0xa6,0x49,0x52,0xea,0x4d,0x15,0x73,0x52,0x65,0x7d,0x1a,0xe2,0x81,0x31,0x8b,0xe4,0x4a,0xec,0xab,0x51,0x58,0xab,0x91,0xe,0x4,0xe5,0x2f,0x65,0x47,0xcd,0x5a,0xed,0x24,0x78,0x88,0xf0,0x95,0x14,0x69,0x9b,0x22,0xa2,0x16,0xa2,0x14,0x8a,0x5d,0x3a,0x6e,0x3c,0x85,0x18,0x61,0xa5,0x7c,0x8b,0x10,0x37,0xb5,0xba,0x59,0x36,0x58,0xd2,0x16,0x8d,0x9c,0x61,0x49,0xc8,0x82,0x14,0x35,0x5f,0x96,0xa6,0x4a,0x25,0x62,0xc,0xa4,0x1c,0x67,0xc8,0x82,0xa1,0x48,0x4a,0x19,0xe6,0xa1,0x67,0x2c,0x88,0x36,0x25,0x74,0xd1,0xe4,0x8a,0x89,0x8a,0xa2,0x1c,0x86,0x2c,0x8c,0x3e,0x15,0x61,0xbe,0x95,0xe,0x21,0x45,0x21,0xea,0x61,0xa0,0xa2,0x7e,0xd6,0x44,0x8b,0x9b,0xe9,0x15,0x3b,0x2a,0x45,0xaf,0x53,0x7,0xd6,0x48,0x42,0xa9,0x24,0x22,0x25,0x1b,0xdb,0x12,0xc2,0x46,0x5e,0x39,0x1c,0x85,0x44,0x95,0xc,0xf9,0x48,0x28,0x9a,0x95,0x20,0xa8,0x51,0x29,0x39,0x66,0x40,0x99,0xfa,0xf9,0x43,0xc3,0xaa,0x92,0x59,0x64,0x22,0xb6,0xcb,0x3d,0x16,0x12,0xcf,0xd,0x85,0x65,0x94,0xbc,0x8a,0x2a,0x62,0x58,0x54,0x55,0x30,0xa0,0xb8,0x8e,0xa3,0xe6,0x54,0xc5,0x33,0x52,0x4d,0x53,0xa9,0x3,0x41,0x39,0xa4,0xa6,0x30,0x7b,0x1b,0x49,0x4d,0xb0,0xe0,0x1,0x52,0xcc,0x7,0x91,0x40,0x75,0x22,0x38,0x8,0x18,0x1c,0xc5,0x1,0xc8,0x24,0x6,0x97,0xb,0x1,0x94,0x28,0x6,0xec,0x58,0x1d,0x44,0x81,0xd8,0x40,0x1e,0x4a,0x7,0x94,0x90,0x1e,0x98,0x1f,0x58,0x1f,0x18,0x1f,0x50,0x1f,0xa0,0x6b,0x28,0x2d,0x81,0x2c,0xe0,0xa4,0xa0,0x4a,0x22,0x46,0x39,0x4c,0x72,0xb3,0x81,0x28,0x82,0x44,0xa1,0x26,0x2b,0x20,0x13,0x48,0x20,0x8c,0x4a,0x21,0xc9,0x20,0x13,0x84,0x11,0x94,0xe4,0x62,0x1c,0x80,0x50,0x10,0x87,0x91,0xa1,0xa0,0x53,0xb,0x91,0xc7,0x1,0x5c,0x26,0x41,0xc,0x40,0x13,0xe6,0x38,0x82,0x10,0xe4,0x10,0x4,0xe2,0x10,0x51,0x48,0x43,0xa3,0x4a,0x4,0xc1,0x68,0xa5,0x21,0x1c,0x5a,0x30,0x13,0x4,0x19,0x14,0x84,0x6d,0xa2,0x10,0x80,0x2,0x9,0x40};
Prips::Drawable *logo_senac;
};


void scene_main_setup() {
    scenesTable[SCENE_MAIN] = {
        &scene_main_on_awake,
        &scene_main_on_enter,
        &scene_main_on_frame,
        &scene_main_on_exit
    };
}

void scene_main_on_awake() {

}

void scene_main_on_enter() {
    PNG::guys = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_guys);
    frame = 0;
    PNG::logo_senac = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_logo_senac);

}

void scene_main_on_frame() {

    frame++;
    lvDisplay.clear(0);
    int x = (lvk_display_w - 128)/2;
    int y = (lvk_display_h - 128)/2;
// - wait_time - [ senac ] - [ creds ] - wait_time
    int wait_time = 30;
    int secs_displaying = 3;
    int senax_start = wait_time;
    int senac_end = senax_start + 30 * secs_displaying;
    int guys_start = senac_end;
    int guys_end = senac_end + 30 * secs_displaying;
    int intro_end = guys_end + 30;
    if(frame > senax_start && frame < senac_end) {
        PNG::logo_senac->draw(x, y);
    }
    x = (lvk_display_w - 128)/2;
    y = (lvk_display_h - 32)/2;
    if(frame > guys_start && frame < guys_end) {
        PNG::guys->draw(x, y);
    }

    if(frame > intro_end) {
         lvDirector.runScene(SCENE_GAME);
    }

}

void scene_main_on_exit() {
    delete PNG::guys;
    delete PNG::logo_senac;
}
