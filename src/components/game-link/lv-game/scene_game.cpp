
#include "lv-game/scene_game.h"
#include "lv-engine/engine.h"
#include "esp_attr.h"
#include "esp_heap_caps.h"

#ifndef PRIPS_DECODER
#define PRIPS_DECODER
#define PRIPS_FILE_VERSION 		0b01
#define PRIPS_FILE_SIGNATURE 	0b01100
#include <math.h>
#include <stdlib.h>
namespace Prips {
typedef unsigned char byte;
typedef unsigned short ui16;
typedef unsigned int ui32;
typedef struct PlanesWalker {
    ui32 byteStart;
    ui32 sizeInBytes;
    const byte *const image;
    ui32 cursor;
    ui32 currentByte;
    ui32 buffer;
    ui32 rleBuffer;
    ui32 currentColorBit;
    PlanesWalker(ui32 _byteStart, const byte *const _image) : byteStart(_byteStart), image(_image) {
        rewind();
    }
    void rewind() {
        buffer = 8;
        cursor = byteStart;
        currentByte = *(image + cursor);
        sizeInBytes = advance();
        goToNextByte();
        sizeInBytes += cursor - byteStart;
        pickFirstBit();
        rleBuffer = advance();
    }
    inline ui32 nextPixelColor() {
        if(--rleBuffer == 0) {
            rleBuffer = advance();
            currentColorBit = !currentColorBit;
        }
        return currentColorBit;
    }
    inline void pickFirstBit() {
        currentColorBit = (currentByte & 0x80) >> 7;
        currentByte <<= 1;
        buffer--;
    }
    inline void goToNextByte() {
        currentByte = *(image + ++cursor);
        buffer = 8;
    }
    ui32 advance() {
        ui32 bit = 0;
        ui32 number = 0;
        ui32 count = 0;
        ui32 counting = 1;
        do {
            bit = (currentByte & 0x80);
            currentByte <<= 1;
            buffer--;
            if(!buffer) goToNextByte();
            if (counting) {
                if(!bit) count++;
                else counting = false;
            }
            if (!counting) {
                number |= bit == 0 ? 0 : 1;
                if(count-- == 0) break;
                else number <<= 1;
            }
        } while (true);
        return number;
    }
} PlanesWalker;
typedef struct File {
    byte planes;
    byte available;
    byte hasAlpha;
    ui16 width;
    ui16 height;
    const byte *const image;
    PlanesWalker *p;
    File(const byte *const _image) : image(_image) {
        byte headerHigh = *(image + 0);
        byte headerLow  = *(image + 1);
        available = (headerHigh & 0b11111000) >> 3 == PRIPS_FILE_SIGNATURE;
        available = available && (headerLow & 0b11000000) >> 6 == PRIPS_FILE_VERSION;
        if (!available) return;
        planes 	= (byte) (headerHigh & 0b00000111);
        width 	= pow(2, 2 + ((byte) (headerLow & 0b00111000) >> 3));
        height 	= pow(2, 2 + ((byte) (headerLow & 0b00000111)));
        p = NULL;
    }
    inline ui32 planesStart() {
        return 2 + pow(2, planes); // 2 bytes header + (n * colors)
    }
    unsigned short color(ui16 index) {
        return *(image + (2 + index)); // 2 bytes header + (n * colors)
    }
    byte* decompress() {
        if (!available) return NULL;
        byte *buffer = (byte*) heap_caps_malloc(height * width * sizeof(byte), MALLOC_CAP_8BIT | MALLOC_CAP_SPIRAM);
        ui32 planePadding = 0;
        hasAlpha = false;
        for(ui16 pln = 0; pln < planes; pln++) {
            p = new PlanesWalker(planesStart() + planePadding, (const byte *const) image);
            planePadding += p->sizeInBytes;
            for (ui16 y = 0; y < height; y++) {
                for (ui16 x = 0; x < width; x++) {
                    byte b = pln ? *(buffer + (x + y * width)) : 0;
                    b = (b << 1) | p->nextPixelColor();
                    *(buffer + (x + y * width)) = b;
                }
            }
            delete p;
            p = NULL;
        }
        for (ui16 y = 0; y < height; y++) {
            for (ui16 x = 0; x < width; x++) {
                const byte c = color(*(buffer + (x + y * width)));
                *(buffer + (x + y * width)) = c;
                if (c == 0) hasAlpha = true;
            }
        }
        return buffer;
    }
} File;
typedef struct Drawable {
    byte width;
    byte height;
    byte hasAlpha;
    lv::octet *decompressed;
    Drawable(const byte *const data) {
        File *parser = new File(data);
        width = parser->width;
        height = parser->height;
        decompressed = parser->decompress();
        hasAlpha = parser->hasAlpha;
        delete parser;
        parser = NULL;
    }
    void draw(const byte x, const byte y) {
        lvDisplay.blit(lv::Region( x, y, width, height), decompressed);
    }
    void draw(const lv::Region src, const lv::Point dest) {
        lvDisplay.blit(
            src, dest, decompressed, lv::Size(width, height)
        );
    }
    ~Drawable() {
        free(decompressed);
        decompressed = NULL;
    }
} Drawable;
}
#endif
namespace PNG {
const unsigned char raw_bg[] = {0x64,0x6d,0x9,0x1,0x5,0xb,0x17,0x14,0x13,0x8,0xc,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb7,0x80,0x0,0x6,0x3b,0x13,0x40,0x77,0xb2,0x38,0x1f,0x60,0x76,0xe4,0xa4,0x10,0xd2,0x2a,0x52,0x22,0xa5,0x58,0x10,0x95,0x61,0x30,0x48,0x4,0x14,0x95,0x4,0x8,0xd1,0x13,0x91,0x11,0x3c,0x80,0x43,0x85,0x20,0x9a,0x5,0x88,0x17,0xd3,0x42,0x53,0x40,0xc2,0xd,0xac,0x8e,0x4b,0x23,0x9a,0x9,0xa0,0xfe,0x3e,0x22,0x9,0xa0,0xdb,0x92,0x91,0x39,0x29,0x1a,0x5,0xf5,0x58,0x95,0x58,0x46,0x16,0x9a,0xe,0x12,0x54,0x74,0x95,0x8,0x45,0x86,0x26,0x83,0xb8,0xf8,0xc9,0xa7,0x88,0x9e,0x68,0x17,0xe1,0x4,0x36,0x4,0x4,0xd0,0x7e,0x11,0x81,0x16,0xc8,0xe3,0xa6,0x9e,0x22,0x79,0xa0,0x47,0x84,0x26,0x9e,0x22,0x79,0xa0,0xfb,0x92,0x90,0x56,0x10,0x8e,0x81,0x1,0x56,0x12,0x8c,0x84,0xa0,0x45,0x49,0x50,0x42,0x54,0x78,0x84,0x69,0x50,0x10,0xe1,0x49,0xa1,0x89,0xa0,0x5f,0x86,0x26,0x81,0x62,0x68,0x62,0x5,0xf9,0x90,0x59,0x1a,0x4,0xd6,0x22,0x75,0x84,0x34,0x78,0x18,0xa,0x94,0x88,0x41,0xe0,0x50,0x47,0x88,0xa,0x1,0x8a,0x31,0x39,0x10,0xd4,0x1,0x59,0x82,0x48,0x1,0x57,0x45,0x10,0x61,0x10,0x17,0x81,0x20,0x16,0xd8,0xa2,0xc,0x22,0x60,0x59,0x40,0x91,0x1,0x62,0x9,0xa0,0x58,0x82,0x68,0x16,0x20,0x9a,0x7,0xf8,0x16,0x60,0x96,0x4,0xa9,0x22,0x60,0x96,0x4,0xc4,0xa2,0x20,0x96,0x4,0x94,0x44,0x74,0x58,0x61,0x16,0x4,0xa9,0x67,0x9a,0x18,0x9a,0x4,0x93,0x67,0x9a,0x21,0x36,0x22,0x68,0x12,0xbf,0x9e,0x68,0x62,0x68,0x12,0xbf,0x9e,0x18,0x45,0x81,0x4f,0x89,0x96,0x76,0x54,0x22,0x58,0x13,0x62,0xe5,0x86,0x65,0x81,0x66,0x58,0x66,0x58,0x16,0x51,0x10,0x62,0x68,0x16,0x26,0x86,0x26,0x81,0x2e,0xa2,0x66,0x86,0x26,0x83,0xe4,0x18,0x99,0x5,0x91,0xa0,0xfe,0x2e,0x32,0x74,0x14,0x40,0x46,0x8d,0xe2,0x62,0x6,0x90,0xa7,0x83,0xb5,0x8a,0xf6,0x26,0x24,0x28,0x22,0xf,0x58,0xd6,0x26,0x15,0x20,0xc8,0x10,0x79,0xa9,0x89,0x82,0x54,0xe,0x65,0xa9,0x77,0xe7,0x82,0x68,0x37,0x59,0x59,0x4e,0xa0,0x66,0x6b,0x42,0x17,0xd0,0x1a,0x56,0x30,0x98,0x1a,0xb4,0x37,0x81,0xb5,0xd,0x58,0x1b,0x90,0xde,0x7,0xde,0x50,0x0,0x70,0x40,0x0,0xf5,0xa2,0x1,0xaa,0xa3,0xc,0x6,0xb4,0x2b,0x38,0x1a,0xd0,0xc3,0x81,0x9a,0x44,0x49,0xdd,0x81,0x9c,0x50,0x87,0x20,0x19,0x85,0x8,0x10,0x6,0xa4,0x30,0x40,0x1a,0x90,0x8f,0x25,0xe0,0x68,0x42,0x4f,0x78,0x19,0xb5,0x9c,0x58,0x1a,0x90,0x92,0x5d,0x1,0x99,0x6b,0x46,0x73,0x1,0x99,0x49,0x46,0x12,0x6,0xa2,0xb,0x28,0x58,0x40,0x38,0x83,0xf1,0x0,0xdf,0x60,0xf0,0x40,0x38,0x26,0xe,0x84,0x3,0x73,0x3,0xb1,0x0,0xd1,0xca,0xe,0xc4,0x3,0x32,0xda,0x83,0x91,0x0,0xc7,0x2a,0x40,0xf0,0x40,0x32,0x3b,0x58,0x38,0x10,0xc,0xcc,0x89,0x83,0x71,0x0,0xbf,0x10,0x88,0x98,0x34,0x10,0xc,0x9,0x24,0xb2,0x60,0xc8,0x40,0x2f,0x35,0x25,0x10,0xc,0xc4,0x2,0xc7,0x2d,0xf1,0x20,0xcc,0x40,0x2b,0x2d,0xbb,0x2d,0xa8,0x31,0x10,0xa,0x72,0xa4,0xba,0x2a,0x40,0xd0,0x40,0x2a,0x3b,0x5a,0x3b,0x58,0x18,0x33,0xa2,0x10,0xc8,0x80,0x63,0x3a,0x22,0x10,0x88,0x6,0x33,0xcb,0x24,0x92,0x81,0x8d,0x5a,0x51,0x17,0x28,0x18,0xd4,0x9c,0x4d,0xde,0x6,0x1e,0x9b,0x2d,0xba,0x78,0x19,0x88,0x8a,0x92,0x91,0x81,0x9d,0xa3,0xb5,0x81,0xc3,0x3a,0x20,0x1c,0xce,0x88,0x7,0x33,0xca,0x7,0x35,0x24,0xa0,0x73,0x52,0x5e,0x7,0x1e,0x9a,0x78,0x1d,0x9b,0x60,0x77,0x60,0x26,0x18,0x82,0x81,0xc2,0x56,0x68,0x1c,0x2d,0x11,0x38,0x1c,0x2b,0xfa,0xa8,0x1d,0x7a,0x80,0xf5,0x43,0x10,0x41,0xa2,0x27,0x22,0x22,0x78,0x10,0x10,0xb6,0x34,0x13,0x3,0x56,0x18,0x29,0x41,0x30,0x35,0x95,0x8d,0x66,0x94,0x13,0x3,0x5b,0x44,0x42,0x11,0x13,0x94,0x13,0x3,0x5a,0xfe,0xa6,0xfe,0xaa,0x51,0xbc,0xb0,0x80,0x3a,0xea,0x2b,0xa8,0xa1,0x21,0x41,0x20,0x5a,0x38,0x60,0xc0,0xd9,0x7,0x11,0x8a,0x1a,0x30,0x35,0x41,0xb6,0x53,0x15,0x8a,0x65,0x30,0x35,0x28,0x54,0xc5,0x31,0x50,0xc4,0x53,0x3,0x53,0x8,0x62,0x4c,0x53,0x15,0xb,0x65,0x30,0x2f,0xaa,0x31,0x91,0x11,0x8c,0x53,0x15,0x8a,0x65,0x30,0x30,0x4c,0xc5,0xfe,0xa5,0x31,0x4c,0x56,0x29,0x94,0xc0,0xd4,0x82,0x7a,0x89,0x21,0x4c,0x56,0x29,0x94,0xc0,0xd5,0x7,0x11,0x8a,0x54,0x2d,0x98,0xa0,0xd6,0x1c,0x65,0x29,0x98,0xb4,0x52,0x83,0x66,0x18,0x29,0x4c,0x1a,0x30,0x3d,0x29,0x47,0x14,0xc1,0xa3,0x3,0xd3,0x10,0x71,0x4c,0x1a,0x30,0x31,0x9d,0x23,0x10,0x71,0x4c,0x1a,0x30,0x30,0x66,0x48,0xc4,0x3b,0x21,0x4e,0x18,0x38,0x30,0x62,0x88,0x20,0x61,0x4e,0x18,0x38,0x30,0x62,0x90,0xc3,0x24,0x61,0x1,0x41,0x20,0xf6,0x30,0x59,0x46,0x27,0x22,0x1a,0xf,0x98,0x81,0xa6,0x4,0x80,0xb8,0xe7,0x14,0x51,0x66,0x4,0x80,0xb8,0xa4,0x22,0x33,0x24,0x59,0x81,0x20,0x2e,0x4c,0x4a,0x22,0x34,0x48,0x90,0x44,0xb,0xe8,0x5a,0x68,0xe8,0x51,0xdc,0xfc,0xb3,0xf2,0x3,0x1,0x8d,0xa2,0x14,0x50,0x16,0x44,0x1d,0x8b,0x14,0x5,0xc4,0xd9,0x18,0x9c,0x50,0x16,0xce,0x56,0x25,0x40,0xc6,0x39,0x9d,0xa0,0x31,0x96,0x21,0x28,0xb0,0x31,0x16,0x21,0x24,0x28,0x20,0x2c,0x83,0x8,0xc7,0xb,0x21,0x8,0xc4,0x50,0x84,0xad,0x88,0x68,0x50,0x24,0x18,0x1c,0x3d,0x8,0x4a,0x38,0x70,0x26,0x14,0x1e,0x35,0x8,0x49,0xc,0x1a,0xa,0x8c,0x8,0x89,0x42,0x14,0x82,0x87,0x14,0x51,0x6,0x11,0x14,0xc0,0x88,0xe6,0x16,0x50,0x8b,0x4,0x8c,0xc0,0x88,0xb1,0x2,0xc2,0xa8,0x13,0x23,0x2,0x22,0xba,0x43,0x2,0xa8,0x13,0x23,0x2,0x22,0x10,0xa3,0x4,0x18,0xe8,0x13,0x23,0x2,0x22,0xb2,0xe,0x3a,0x48,0x44,0x69,0x2,0xa8,0xe0,0x84,0x60,0xe3,0x8,0x3a,0x10,0x42,0xc,0x12,0x8e,0x8,0x4a,0x88,0x10,0x20,0xa3,0x23,0xc2,0x91,0x8,0xe0,0x84,0x58,0x40,0x89,0x24,0x8c,0x8d,0xb,0x4e,0x8e,0x8,0x45,0x84,0x8,0xc8,0xca,0xca,0x82,0xcc,0xa8,0xd1,0x13,0x42,0x11,0x61,0x2,0x13,0xb2,0xa3,0x20,0xb2,0x32,0x34,0x44,0xa8,0x21,0x15,0x8e,0x28,0xa2,0xa3,0x23,0xa6,0xce,0x8c,0x8d,0x10,0x9b,0x8,0x48,0x8c,0x38,0xa2,0x8a,0x8c,0x82,0xc8,0xc8,0xd1,0x26,0x8,0xcf,0x41,0x12,0xa,0x2a,0x34,0x22,0x88,0x8d,0x11,0x12,0x40,0x94,0x40,0x4c,0x82,0x8a,0x8a,0x8c,0xca,0x8e,0x8a,0x84,0x44,0x90,0x62,0x24,0xe1,0x42,0x88,0x32,0x2a,0xb,0xa2,0xa1,0x11,0x24,0x17,0x34,0xe1,0x40,0x9a,0x2a,0xb,0xa2,0xa1,0x11,0x24,0x15,0xcb,0x16,0x10,0x9,0xb2,0x30,0xb2,0x32,0x34,0x51,0x2,0x50,0xab,0x14,0x41,0x8,0xc8,0x2a,0xcc,0x8d,0x14,0x40,0x94,0x29,0xa1,0x29,0x23,0xa3,0x30,0x99,0xc,0x8d,0x14,0x40,0x94,0xac,0x61,0x4,0xc9,0x3a,0x30,0xf2,0x1c,0xc8,0xd1,0x26,0x8,0xc9,0x73,0x88,0x12,0x9c,0xe8,0xe1,0x83,0xcf,0x12,0x60,0x84,0xa5,0x3f,0xb1,0xf,0xa3,0xa1,0x1,0x63,0xa3,0xc4,0x98,0xa8,0x4c,0xcc,0x41,0xce,0xa6,0x3a,0x12,0x14,0x10,0x8f,0x12,0x63,0xc4,0x42,0x42,0x9d,0x9c,0xa8,0x2a,0x41,0x88,0xf1,0x44,0x3f,0x3c,0x71,0x26,0xa7,0xe5,0x52,0x20,0x4a,0xcd,0x4,0x11,0xaa,0x9a,0xb6,0xa7,0xc8,0x81,0x32,0x34,0x10,0x46,0x8e,0x62,0x68,0xa8,0x12,0x21,0x8,0x38,0x84,0x22,0x96,0x62,0x8b,0x3c,0x11,0x46,0x43,0x51,0x35,0x28,0xa3,0xa,0x13,0x44,0x18,0x41,0x51,0xd4,0x40,0x94,0x5a,0x10,0x61,0x22,0x44,0xb2,0xc,0x20,0xb1,0xcc,0x81,0x30,0xa0,0x81,0x2,0x0,0xd2,0x73,0x8a,0x3,0xb8,0x86,0x0,0x28,0x18,0x1,0x2d,0x3,0xcd,0xe4,0x9e,0xf5,0x84,0x8,0x23,0x35,0x3,0xe4,0x1f,0x88,0x30,0x83,0xd0,0xa8,0x2c,0xb0,0x40,0xe2,0x32,0x65,0xa4,0x91,0x22,0x60,0xb8,0x4e,0x82,0xa2,0xb3,0x65,0x18,0x26,0xa,0xaf,0xe,0x69,0x8,0xd5,0x56,0xb4,0x92,0x4e,0x55,0xd0,0x29,0xc1,0xd,0x12,0x4a,0x4a,0x51,0xc5,0xbe,0xa,0xb0,0x48,0x18,0x49,0x24,0x2e,0xa0,0xa4,0x13,0x60,0x93,0xe0,0xbc,0xb8,0x60,0x40,0x84,0x44,0x1a,0xe9,0x2,0x82,0x6e,0x22,0x2a,0x84,0x3b,0x44,0x4e,0xa4,0x5d,0x15,0x29,0x64,0x88,0xe1,0x5c,0x98,0x99,0xe5,0x53,0x6e,0x99,0x1a,0x59,0xf,0x95,0x34,0x68,0xa8,0x5c,0xc7,0x9e,0x4b,0xcc,0x5a,0x64,0x69,0x64,0x5d,0x65,0xb4,0x14,0x84,0x6c,0x98,0x68,0xdb,0x57,0x57,0x7d,0x4f,0x9a,0x2a,0x8,0xcd,0x86,0x32,0x18,0x77,0x19,0x87,0xa1,0x63,0x6,0x8c,0x15,0x8,0x7,0xa1,0x63,0x6c,0x40,0x56,0x48,0x12,0x22,0x4d,0xb1,0x2,0xd1,0xfa,0xe0,0xbd,0x4,0xea,0x7c,0xc5,0x10,0x2d,0x3,0xc4,0x91,0xa4,0x9b,0xe7,0x36,0xc4,0x8,0xeb,0x85,0xe1,0xa6,0x43,0x4,0xae,0x73,0x14,0x40,0xa2,0x5,0xfe,0x8,0x51,0xe6,0x8f,0xcc,0x51,0x2,0x64,0xaa,0x9a,0xa4,0xef,0x85,0x35,0xe2,0xe2,0x21,0x3,0x14,0x40,0x8c,0x94,0x92,0x49,0x28,0x21,0xd6,0x2e,0x23,0x8f,0xc9,0xb1,0x2,0x64,0xaa,0x10,0xa0,0xc9,0x1a,0x48,0xe3,0x14,0x40,0xd8,0x52,0xb,0x56,0x29,0xd,0xc8,0x51,0x3,0x3a,0xea,0xab,0xae,0xb,0x17,0x89,0x8b,0xf2,0x14,0x42,0xa8,0xe6,0x98,0x31,0x92,0x2a,0x48,0xac,0x9b,0x11,0x49,0xe,0x30,0x14,0x8c,0x51,0x8,0x81,0xa,0x83,0x29,0xa4,0xf9,0xa2,0x72,0x2a,0x12,0x6e,0xa6,0x88,0x9a,0xa0,0x92,0x22,0x68,0x89,0xb3,0x14,0x46,0x4e,0x92,0x49,0x19,0x24,0x92,0x82,0x28,0x8e,0x48,0x8e,0x73,0x6c,0x42,0x23,0xa1,0xa,0xa8,0x42,0x82,0x24,0x69,0xa,0x69,0x24,0xcd,0x47,0xc8,0x68,0x72,0x8,0x56,0x28,0x98,0xa4,0xc4,0x29,0x2b,0x21,0xba,0xaa,0xeb,0xaa,0xae,0x8,0x57,0x89,0x7e,0x26,0x41,0x2,0x32,0x9c,0xa9,0x88,0x68,0xa0,0x89,0xb,0x92,0x32,0xf0,0xb2,0xad,0x4c,0x28,0xd5,0x82,0x14,0x1a,0x46,0xa,0x65,0x4d,0x28,0xca,0x4d,0x2,0x39,0x3e,0x69,0x3e,0x21,0x42,0x3a,0xa7,0x9e,0x69,0xf6,0xa,0xe2,0x25,0x8b,0x4b,0x19,0xa9,0x35,0x4d,0x24,0x93,0x55,0x82,0xb8,0x8e,0x11,0x9,0x9,0x54,0xa8,0x42,0xa5,0x40,0xad,0x1a,0x48,0x44,0x20,0x11,0x8c,0x82,0x7a,0x99,0x62,0x90,0x69,0x5,0x7a,0xaa,0xe0,0x9b,0x59,0x57,0x89,0x84,0xb5,0x57,0x84,0xca,0x8a,0x26,0x1e,0x21,0x90,0xd8,0x2a,0x22,0xd4,0xd5,0x9e,0xa1,0x9c,0x99,0x50,0xa4,0x44,0x10,0x96,0x14,0x4d,0x24,0xd1,0x7e,0x1b,0x30,0x89,0x3e,0x64,0xa,0xde,0x6d,0x96,0xe1,0xc2,0x4,0x27,0xa8,0x2b,0xd4,0x95,0x82,0x3e,0x6e,0x12,0xc9,0x82,0xa5,0x49,0x50,0x23,0xa1,0xa,0x12,0xd6,0x5,0xba,0x32,0xa2,0x1c,0xb4,0x90,0x16,0xd0,0x84,0xa5,0x66,0xa2,0x1,0x74,0x53,0xb4,0x44,0xd1,0xa0,0x5d,0x31,0x57,0xfa,0xd6,0x48,0x1b,0xba,0x9c,0x80,0xe3,0x97,0xaa,0x6a,0x90,0xa8,0xa8,0x14,0x1d,0x23,0x4f,0x20,0x95,0x35,0x24,0x2d,0x84,0x1a,0x22,0x72,0x22,0x27,0x8d,0x25,0x22,0xa3,0x22,0x62,0x14,0x94,0xd0,0xb6,0x34,0x13,0xa,0x3a,0x2a,0x3c,0xc3,0x48,0x17,0x29,0x41,0x30,0xa3,0xa2,0xa1,0xc3,0x65,0x63,0x59,0xa5,0x4,0xc2,0x89,0x48,0xa8,0x66,0x36,0xd1,0x13,0x91,0x11,0x39,0x41,0x30,0xb7,0x48,0xac,0xf7,0x9d,0x11,0x7f,0xa9,0xbf,0xad,0x14,0x6f,0x2c,0x20,0x2d,0xd2,0x74,0x8c,0x9e,0x54,0x91,0xfa,0x91,0x13,0xa8,0xa1,0x21,0x41,0x22,0xd2,0x52,0x52,0x32,0x4a,0x53,0x4,0x61,0x53,0x86,0xc,0x31,0x25,0x22,0xa2,0x69,0x29,0xd1,0x10,0xc6,0x31,0x98,0xa1,0xa3,0x3,0x54,0x31,0xd,0x65,0x31,0x58,0xa6,0x53,0x3,0x53,0x5,0xc,0x53,0x15,0xc,0x45,0x30,0x35,0x30,0x86,0x24,0xc5,0x31,0x50,0xb6,0x53,0x2,0xf2,0x23,0x64,0x44,0x4d,0x4c,0x53,0x15,0x8a,0x65,0x30,0x2d,0xa4,0x8e,0x5f,0xea,0x53,0x14,0xc5,0x62,0x99,0x4c,0xc,0xf2,0xd9,0x3a,0x91,0x4c,0x53,0x15,0x8a,0x65,0x30,0x2e,0xda,0x2a,0x8f,0xa3,0x18,0xa5,0x42,0xd9,0x8a,0xb,0xd6,0x89,0x20,0xd7,0x31,0x4a,0x66,0x2d,0x14,0xa0,0xd8,0xb4,0x39,0x4e,0x53,0x6,0x8c,0xf,0x4c,0x41,0xc5,0x30,0x68,0xc1,0x44,0x9,0xcc,0x41,0xc5,0x30,0x68,0xc1,0x44,0x9,0xcd,0x51,0xc5,0x30,0x68,0xc1,0x44,0x9,0xcc,0x43,0xb2,0x14,0xe1,0x83,0x85,0x10,0x27,0x2d,0xc7,0x14,0xe1,0x83,0x85,0x10,0x27,0x2a,0xa1,0x49,0x18,0x40,0x50,0x48,0x51,0x2,0x72,0x49,0x1c,0x51,0x89,0xc8,0x86,0x83,0xe2,0xd4,0x79,0x81,0x20,0x2e,0x12,0x41,0x65,0x16,0x60,0x48,0xb,0x8a,0x42,0x23,0xa2,0x45,0x98,0x12,0x2,0xe4,0xc5,0x48,0x8d,0x16,0x70,0x44,0xb,0xf1,0xb2,0x4e,0x85,0x1d,0xcf,0xcb,0x3f,0x20,0x30,0x1d,0x68,0xe8,0x50,0x16,0x47,0x5a,0x76,0x85,0x1,0x64,0x6a,0x69,0xc9,0x14,0x5,0xa1,0x24,0x6c,0x44,0xc,0x63,0x9b,0x11,0x3,0x19,0x65,0x57,0xc9,0x70,0x31,0xd2,0x95,0x54,0xf7,0x8,0x8b,0x20,0xc2,0x31,0xc2,0xc8,0x42,0x31,0x17,0x44,0x7c,0x5a,0x1e,0x9,0x6,0x7,0xf,0x72,0xdf,0x25,0xd2,0x1c,0x9,0x85,0x9,0x65,0x65,0x4c,0xd7,0x2d,0xd5,0xcd,0x1a,0xa,0x8c,0xda,0x52,0xb7,0x52,0x10,0x44,0x44,0x6c,0x71,0x45,0x10,0x61,0x11,0x4c,0x88,0x94,0xad,0xd4,0x9a,0x3a,0x4,0xac,0x12,0x33,0x22,0xd4,0xbc,0xd3,0x22,0xc4,0x8,0x50,0xaa,0x4,0xc8,0xc8,0x44,0xf1,0xa8,0xc8,0xd3,0x54,0x2a,0x81,0x32,0x32,0x11,0x3c,0x5e,0x8a,0x8d,0x3d,0x44,0x90,0x42,0x4,0xc8,0xcf,0x2c,0xf3,0x27,0xa3,0x22,0xa4,0x91,0x4,0x49,0x11,0x1a,0x40,0xaa,0x3a,0xa2,0x25,0x49,0xd2,0x7a,0x19,0x19,0x32,0xaa,0x3a,0x10,0x42,0xc,0x12,0x8e,0x94,0x89,0x52,0x74,0x92,0xa1,0x94,0x92,0x4c,0xcd,0x33,0xa3,0xc2,0x91,0x8,0xe9,0x26,0x92,0xa6,0xa9,0x2a,0x17,0x1d,0x22,0x49,0x23,0x23,0x42,0xd3,0xa3,0x82,0x11,0x6d,0x24,0x93,0x23,0x23,0x2b,0x2a,0xb,0x32,0xa3,0x44,0x4d,0x8,0x45,0x84,0x8,0x4e,0xca,0x8c,0x82,0xc8,0xc8,0xd1,0x12,0xa0,0x84,0x60,0xe2,0x8a,0x2a,0x32,0x3a,0x6c,0xe8,0xc8,0xd1,0x9,0xb0,0x84,0x66,0x45,0xd4,0xa2,0x8a,0x8c,0x82,0xc8,0xc8,0xd1,0x26,0x8,0xcf,0x5e,0x43,0xca,0x28,0xa8,0xd0,0x8a,0x22,0x34,0x44,0x49,0x2,0x51,0x9,0x64,0x5d,0x4c,0x20,0xc8,0xa8,0xcc,0xa8,0xe8,0xa8,0x44,0x49,0x6,0x22,0x4e,0x4f,0x53,0xce,0x63,0xa2,0xa0,0xba,0x2a,0x11,0x12,0x41,0x73,0x44,0xd4,0x64,0x28,0x8a,0x82,0xe8,0xa8,0x44,0x49,0x5,0x72,0xc1,0x73,0x23,0xb,0x23,0x23,0x45,0x10,0x25,0xa,0xa1,0x64,0x10,0x8c,0x82,0xac,0xc8,0xd1,0x55,0x9,0x42,0x9a,0x12,0x92,0x3a,0x33,0x9,0x90,0xc8,0xd1,0x55,0x9,0x4b,0xc6,0x10,0x4c,0x93,0xa3,0xf,0x21,0xcc,0x8d,0x12,0x92,0x8,0xc9,0x71,0x7,0x12,0x9c,0xe8,0xe1,0x83,0xcf,0x12,0x92,0x8,0x4b,0x73,0xfb,0x10,0xfa,0x3a,0x10,0x16,0x3a,0x3c,0x4a,0x48,0xa8,0x4c,0x22,0x61,0xa,0x63,0xa1,0x21,0x41,0x8,0xf1,0x29,0x23,0xc4,0x42,0x42,0x49,0x67,0x2a,0xa,0x90,0x62,0x3c,0x51,0xf,0xcf,0x1e,0xd1,0x69,0xf9,0x54,0x88,0x12,0xb3,0x41,0x4,0x6a,0xa6,0xad,0xa9,0xf2,0x20,0x4c,0x8d,0x4,0x11,0xa3,0x98,0x9a,0x2a,0x4,0x88,0x42,0xe,0x21,0x8,0xa5,0x98,0xa2,0xcf,0x4,0x51,0x90,0xd4,0x4d,0x4a,0x24,0x40,0x91,0x34,0x41,0x84,0x15,0x1d,0x44,0x9,0x42,0xa6,0x14,0x71,0x4c,0x83,0x8,0x2c,0x73,0x20,0x4c,0x2c,0x51,0x46,0x3,0x61,0x5,0x18,0xf,0x64,0x28,0x0,0x2b,0x30,0x3,0x62,0x9,0x10,0xa0,0xa8,0xa0,0xe2,0x49,0xd1,0xaa,0xa,0xe,0xd,0xe6,0x9a,0x7a,0x9d,0x8f,0x42,0xc4,0x83,0x6e,0x4e,0x46,0x92,0x29,0x69,0xd,0xa8,0xa1,0x40,0xd3,0x9b,0xb8,0xc9,0x77,0x62,0x48,0x24,0xcd,0x3,0x3e,0xaa,0xbd,0x24,0x92,0x21,0x4,0x65,0x14,0x64,0xed,0x3,0x37,0x49,0x5e,0x3a,0x41,0x44,0x53,0x51,0x53,0xb4,0xd,0x6,0x26,0x92,0x49,0xb1,0x26,0x4d,0x34,0x46,0x66,0xd,0x6,0x20,0x85,0xc4,0x14,0x61,0x19,0x1e,0xc,0xda,0x22,0x68,0x72,0x35,0x58,0x82,0x8,0x64,0xb8,0x32,0x22,0x22,0x27,0x22,0xea,0x47,0x2d,0x3b,0x27,0xbd,0x12,0xe0,0xc9,0xb2,0x32,0xc8,0x74,0x41,0x6e,0xea,0xee,0x99,0x90,0x31,0x6c,0x8c,0xb2,0x2e,0x91,0xe,0x28,0xc4,0xe4,0xba,0x40,0xc5,0xba,0xb2,0xea,0x74,0x46,0x2a,0xf5,0x9e,0xe6,0x83,0x32,0x18,0x94,0x31,0x5,0x4c,0xe3,0x60,0x43,0x8,0x7,0xa0,0xd1,0x8,0x30,0x79,0x82,0x78,0x26,0x21,0x9a,0x61,0xc2,0x91,0x24,0x44,0x13,0xa8,0x25,0x31,0x66,0x86,0xcc,0x4d,0x69,0x24,0x63,0x1b,0xe0,0x88,0x43,0x46,0x42,0xa3,0x5,0x2c,0x9c,0xc5,0x44,0x45,0xb8,0x22,0x10,0xa2,0xa7,0xf8,0x93,0xda,0x5a,0x4d,0x19,0x19,0x2,0xb1,0x15,0x9b,0x44,0xef,0x98,0xe9,0xa2,0x58,0xa4,0x21,0x2,0xa1,0xa9,0x22,0x84,0x84,0x26,0x8c,0x29,0x8,0xd0,0x2a,0x35,0x21,0x9,0x4,0x54,0x58,0x49,0x1a,0x48,0x64,0x40,0xd2,0x8c,0x28,0xd6,0xbc,0xf6,0x31,0x62,0x90,0x60,0x42,0x21,0x9a,0x6a,0xa9,0xa6,0x30,0x8a,0x86,0xb,0x5e,0x26,0x18,0x11,0x92,0x59,0x88,0x88,0x68,0xb3,0x13,0x14,0x20,0xc2,0x8c,0x15,0x12,0x6b,0x46,0x14,0x64,0x72,0xc8,0x92,0xa3,0x99,0x11,0x8,0x44,0x41,0x41,0x44,0x4a,0x28,0xc2,0xa5,0x2f,0xef,0x25,0x59,0x51,0x93,0xd9,0x90,0x4c,0x21,0x59,0xb3,0x66,0xd3,0x3b,0x71,0x29,0x91,0x8,0x44,0x42,0x10,0x48,0x45,0x25,0x2a,0x48,0x52,0x48,0xa8,0x42,0x5c,0x4a,0x69,0x8,0xd2,0x42,0x34,0x11,0x10,0xaa,0x92,0x10,0x88,0x84,0x25,0x51,0x75,0x18,0x91,0xa4,0x29,0xa4,0x82,0x14,0x30,0x83,0x16,0xfc,0x52,0xf1,0x38,0xa2,0x62,0x90,0x20,0x22,0xaa,0x69,0xaa,0xa3,0x12,0x85,0xaa,0x13,0xe2,0x5f,0x89,0x82,0x3,0xa2,0x18,0x88,0x49,0xf1,0x4b,0xce,0x2c,0xc3,0x20,0x80,0x69,0x87,0xab,0x4a,0x94,0x8e,0xab,0x42,0x51,0x10,0x94,0x8,0x45,0x8a,0x1a,0xa4,0xc8,0xbe,0xef,0xb9,0x36,0x64,0xfe,0x8,0xc9,0x36,0x6c,0xd2,0x74,0xc4,0xb7,0x4e,0x31,0x8,0x44,0x82,0x64,0xa8,0xa9,0x22,0xaa,0x44,0x44,0x12,0x94,0x83,0x90,0x8d,0x2,0xb6,0x9a,0x10,0x9a,0x62,0x9c,0x5d,0x8e,0x46,0x92,0xb,0x13,0x43,0x10,0x46,0xfc,0xe6,0x21,0x96,0x29,0x2,0xaa,0xa2,0x2a,0xa2,0x4,0x11,0x28,0xe5,0x31,0x57,0x89,0x82,0xa2,0x23,0xa3,0x9e,0x21,0x1f,0x29,0x4c,0x54,0x36,0xd0,0x25,0xaa,0x8,0x1e,0xa5,0x4a,0x4a,0xa9,0x4,0x15,0xa,0x4c,0x80,0xa8,0x20,0x5f,0x99,0x29,0x2f,0x90,0x41,0xe4,0xf9,0x48,0xa,0x89,0x34,0x85,0xb9,0xf4,0xd3,0x94,0x50,0xd9,0x8c,0xa,0x92,0x92,0x90,0x51,0x36,0x71,0x81,0x21,0x0,0xa9,0xa4,0x98,0x69,0x98,0x70,0x44,0x40,0x16,0x47,0x5c,0x28,0x36,0x5b,0x96,0x5b,0x85,0x65,0xbb,0xb8,0x91,0xd2,0x26,0x86,0x96,0xbd,0x6d,0x5f,0x5b,0x54,0xa2,0xab,0xd6,0xd5,0x35,0x4a,0x61,0xd5,0x64,0x71,0x4a,0x94,0x4c,0x7c,0xd4,0xa4,0xa5,0x13,0x3c,0xd4,0xac,0x77,0x13,0x5c,0xc4,0xc1,0x36,0x6c,0x3d,0x94,0x62,0x5c,0x94,0x92,0x21,0x1,0x61,0x9,0xcb,0xd5,0x35,0x48,0xc4,0x18,0x88,0xab,0x28,0xb0,0x54,0x66,0xe9,0x1a,0x79,0x8,0x52,0x10,0x89,0xa4,0xab,0x42,0xca,0xd1,0x13,0x91,0x11,0x3c,0xa6,0x44,0xa4,0x54,0x64,0x4d,0x19,0x91,0xb3,0xc4,0x9,0x20,0x26,0x6c,0x87,0x45,0x47,0x99,0x8a,0x70,0xe2,0x60,0x99,0x15,0x9d,0x15,0xe,0x42,0xc8,0x9a,0x12,0x9a,0x2b,0x40,0x98,0x84,0x44,0xa4,0x54,0x33,0x20,0x95,0x64,0x7d,0x59,0x1d,0x48,0x9,0x9b,0x2b,0xa4,0x56,0x7b,0xd9,0x11,0x31,0x31,0xf5,0xa6,0x37,0x96,0x10,0x45,0x23,0xa4,0xe9,0x19,0x3d,0x34,0x92,0x5c,0x94,0xab,0xc9,0x49,0x34,0x24,0x9c,0xb3,0x89,0xa9,0x1a,0x4a,0x4a,0x46,0x49,0x6b,0x32,0x22,0xac,0x92,0x2a,0xcb,0xa9,0xd2,0x97,0xb5,0xa4,0x62,0x3a,0x49,0x29,0x15,0x13,0x49,0x59,0x11,0x1a,0x4a,0x93,0x49,0x2a,0xd4,0xa5,0x58,0x4b,0x46,0x44,0x4,0x82,0xcf,0x32,0x3c,0x42,0x66,0x21,0x1b,0x21,0x59,0x88,0xd0,0x89,0xa1,0x6,0x24,0xb0,0xd3,0x46,0x64,0x65,0x21,0x51,0x99,0x51,0xd5,0x50,0x41,0x10,0x88,0x62,0x68,0x69,0x26,0x45,0x66,0x44,0x21,0xa5,0x62,0x4,0xf,0x44,0x49,0x4f,0x56,0x47,0xa3,0xa6,0x62,0x11,0x91,0x95,0x99,0x15,0x9,0x30,0x45,0xc3,0x71,0x8d,0x19,0x95,0x10,0x86,0x46,0x65,0x8a,0x20,0x49,0x23,0x4b,0xbf,0x25,0x2a,0xa2,0x6a,0x64,0x6a,0x91,0x12,0xa6,0x44,0xa8,0x92,0xc,0x44,0xbe,0xc8,0xd4,0x8a,0xb2,0x51,0x12,0x21,0x6a,0xc8,0x69,0x48,0x5a,0xb6,0x24,0x82,0xe5,0xaa,0xaf,0xb9,0x12,0x4a,0x93,0xb6,0xd1,0x4a,0x44,0x42,0x95,0x14,0xa4,0x8a,0x20,0xae,0x56,0x25,0xaa,0x3c,0xca,0x8a,0x99,0x90,0x59,0x18,0x89,0x8a,0x20,0x49,0x4,0x8b,0x14,0x2d,0x19,0xee,0xe5,0xad,0x99,0x91,0xa,0xa8,0x45,0xf,0x48,0x20,0x24,0x86,0x2b,0x57,0xd4,0xc6,0x46,0x42,0x6a,0x12,0x64,0xe5,0x24,0xe8,0xe2,0x99,0x8d,0x9,0x98,0x89,0x89,0x49,0x4,0x51,0xa,0x24,0x21,0x67,0x47,0xc,0x1d,0x91,0x9,0x49,0x4,0x65,0xb8,0x92,0x6e,0x88,0x26,0xa7,0xc,0x1d,0x1a,0x25,0x24,0x54,0x26,0xa1,0x14,0xd5,0x11,0x11,0x10,0x82,0x2,0x82,0x6a,0xaa,0x21,0x24,0x78,0x86,0x12,0xb9,0x2d,0x8b,0x43,0x13,0x91,0xd,0x2a,0x62,0x88,0x7e,0x22,0x13,0x6a,0xa8,0xa2,0xd8,0x24,0x66,0x61,0xc6,0xce,0x89,0xd,0x2a,0x82,0x4a,0x92,0xa1,0xca,0xa0,0xac,0x24,0x44,0x9,0x10,0x88,0x7a,0x41,0xd0,0xb9,0x48,0x8,0x88,0x62,0x6,0x88,0xd4,0x5c,0x90,0xa1,0xae,0x7e,0x59,0xf9,0x23,0x2e,0x7e,0x5e,0x49,0x86,0xa1,0x4c,0x61,0x4b,0x3f,0x2c,0xfc,0xc2,0x8b,0x3f,0x2f,0x31,0x44,0x98,0xce,0xc6,0x8,0xb5,0x45,0xed,0x51,0x61,0x1b,0x54,0x5e,0x58,0x9b,0x4d,0xa3,0xbb,0x18,0x5,0x85,0x3c,0x51,0x80,0xf4,0x47,0x3,0x7a,0x76,0x4b,0xc0,0xc6,0x84,0x22,0x51,0x2f,0x3,0x2e,0x8d,0x69,0x98,0xa8,0xc,0x19,0x5d,0x92,0xe8,0x9,0x2c,0xac,0xa8,0x66,0x57,0x23,0x98,0x8,0x2d,0x29,0x5b,0xa9,0x4,0x56,0x63,0x89,0xa,0xa,0x20,0xc2,0x21,0xa4,0x4a,0x56,0xea,0x4c,0x59,0x5,0x94,0x28,0x9,0x5,0x96,0xa5,0xe6,0x98,0x30,0x83,0x0,0x98,0x50,0x89,0xe3,0x4f,0x69,0x66,0xa0,0xc0,0x26,0x14,0x22,0x78,0xbc,0xd5,0x31,0xe8,0x4c,0x91,0x20,0x98,0x5e,0x59,0xe6,0x4f,0x3c,0xd4,0x92,0x24,0x45,0x45,0xd,0x20,0x54,0x5d,0x11,0x2a,0x4e,0x93,0xc7,0x8c,0x13,0x51,0x62,0x2,0x82,0x45,0xa9,0x12,0xa4,0xe9,0x25,0x3a,0x26,0x92,0x49,0xc9,0xeb,0xc4,0x1c,0x2c,0x20,0x5a,0x4d,0x25,0x4d,0x52,0x51,0xc3,0x84,0xa5,0x12,0x60,0xc1,0xc1,0xc2,0x49,0x21,0x8,0x88,0x49,0x4a,0x10,0x31,0x40,0x97,0x2c,0x41,0x8a,0x10,0x29,0x81,0xa4,0x2a,0x6c,0x41,0x8a,0x44,0xd9,0xa,0x60,0x5c,0x8f,0x22,0xe8,0x47,0xf1,0x6,0x28,0x40,0xa6,0x6,0xbc,0x87,0xcd,0xfc,0x41,0x8a,0x35,0x4a,0x60,0x68,0xb2,0x2e,0xb2,0x5f,0x53,0x94,0xc9,0x95,0x10,0xa5,0x6,0xde,0xa7,0xcb,0x57,0x10,0x53,0x4,0xa,0x50,0x64,0xaa,0x33,0xa,0x94,0xc1,0x2,0x94,0x1b,0x4,0x2,0xc4,0xd,0x98,0x8,0x30,0xc1,0x83,0x46,0xa,0x20,0x6d,0x51,0x46,0xd,0x18,0x28,0x83,0x51,0xc8,0x32,0x60,0xd1,0x82,0x88,0x12,0x4b,0x17,0x1a,0x70,0xc1,0xc2,0x88,0x32,0xc6,0xc6,0xf1,0x42,0x2,0xc7,0xa,0xa0,0xcb,0x12,0xbc,0x47,0xb1,0x42,0x42,0x82,0x2,0xa8,0x13,0xb2,0x44,0x31,0x41,0x52,0xc,0x7,0x12,0x49,0xcd,0x4c,0x50,0x25,0x7,0x72,0xd4,0xbb,0xf1,0x0,0x98,0x1c,0x2c,0xac,0xa7,0x51,0x0,0x90,0x1d,0x35,0xa1,0xb,0xe8,0x48,0x22,0x7,0xcb,0x53,0x51,0x31,0x68,0x83,0x8,0x28,0x1a,0x21,0x3a,0x15,0x5d,0x40,0xce,0xa9,0x44,0x6b,0xc0,0xd2,0xab,0x3a,0x5e,0x80,0xee,0xbb,0x60};
Prips::Drawable *bg;
};
#ifndef PRIPS_DECODER
#define PRIPS_DECODER
#define PRIPS_FILE_VERSION 		0b01
#define PRIPS_FILE_SIGNATURE 	0b01100
#include <math.h>
#include <stdlib.h>
namespace Prips {
typedef unsigned char byte;
typedef unsigned short ui16;
typedef unsigned int ui32;
typedef struct PlanesWalker {
    ui32 byteStart;
    ui32 sizeInBytes;
    const byte *const image;
    ui32 cursor;
    ui32 currentByte;
    ui32 buffer;
    ui32 rleBuffer;
    ui32 currentColorBit;
    PlanesWalker(ui32 _byteStart, const byte *const _image) : byteStart(_byteStart), image(_image) {
        rewind();
    }
    void rewind() {
        buffer = 8;
        cursor = byteStart;
        currentByte = *(image + cursor);
        sizeInBytes = advance();
        goToNextByte();
        sizeInBytes += cursor - byteStart;
        pickFirstBit();
        rleBuffer = advance();
    }
    inline ui32 nextPixelColor() {
        if(--rleBuffer == 0) {
            rleBuffer = advance();
            currentColorBit = !currentColorBit;
        }
        return currentColorBit;
    }
    inline void pickFirstBit() {
        currentColorBit = (currentByte & 0x80) >> 7;
        currentByte <<= 1;
        buffer--;
    }
    inline void goToNextByte() {
        currentByte = *(image + ++cursor);
        buffer = 8;
    }
    ui32 advance() {
        ui32 bit = 0;
        ui32 number = 0;
        ui32 count = 0;
        ui32 counting = 1;
        do {
            bit = (currentByte & 0x80);
            currentByte <<= 1;
            buffer--;
            if(!buffer) goToNextByte();
            if (counting) {
                if(!bit) count++;
                else counting = false;
            }
            if (!counting) {
                number |= bit == 0 ? 0 : 1;
                if(count-- == 0) break;
                else number <<= 1;
            }
        } while (true);
        return number;
    }
} PlanesWalker;
typedef struct File {
    byte planes;
    byte available;
    byte hasAlpha;
    ui16 width;
    ui16 height;
    const byte *const image;
    PlanesWalker *p;
    File(const byte *const _image) : image(_image) {
        byte headerHigh = *(image + 0);
        byte headerLow  = *(image + 1);
        available = (headerHigh & 0b11111000) >> 3 == PRIPS_FILE_SIGNATURE;
        available = available && (headerLow & 0b11000000) >> 6 == PRIPS_FILE_VERSION;
        if (!available) return;
        planes 	= (byte) (headerHigh & 0b00000111);
        width 	= pow(2, 2 + ((byte) (headerLow & 0b00111000) >> 3));
        height 	= pow(2, 2 + ((byte) (headerLow & 0b00000111)));
        p = NULL;
    }
    inline ui32 planesStart() {
        return 2 + pow(2, planes); // 2 bytes header + (n * colors)
    }
    unsigned short color(ui16 index) {
        return *(image + (2 + index)); // 2 bytes header + (n * colors)
    }
    byte* decompress() {
        if (!available) return NULL;
        byte *buffer = (byte*) malloc(height * width * sizeof(byte));
        ui32 planePadding = 0;
        hasAlpha = false;
        for(ui16 pln = 0; pln < planes; pln++) {
            p = new PlanesWalker(planesStart() + planePadding, (const byte *const) image);
            planePadding += p->sizeInBytes;
            for (ui16 y = 0; y < height; y++) {
                for (ui16 x = 0; x < width; x++) {
                    byte b = pln ? *(buffer + (x + y * width)) : 0;
                    b = (b << 1) | p->nextPixelColor();
                    *(buffer + (x + y * width)) = b;
                }
            }
            delete p;
            p = NULL;
        }
        for (ui16 y = 0; y < height; y++) {
            for (ui16 x = 0; x < width; x++) {
                const byte c = color(*(buffer + (x + y * width)));
                *(buffer + (x + y * width)) = c;
                if (c == 0) hasAlpha = true;
            }
        }
        return buffer;
    }
} File;
typedef struct Drawable {
    byte width;
    byte height;
    byte hasAlpha;
    lv::octet *decompressed;
    Drawable(const byte *const data) {
        File *parser = new File(data);
        width = parser->width;
        height = parser->height;
        decompressed = parser->decompress();
        hasAlpha = parser->hasAlpha;
        delete parser;
        parser = NULL;
    }
    void draw(const byte x, const byte y) {
        lvDisplay.blit(lv::Region( x, y, width, height), decompressed);
    }
    void draw(const lv::Region src, const lv::Point dest) {
        lvDisplay.blit(
            src, dest, decompressed, lv::Size(width, height)
        );
    }
    ~Drawable() {
        free(decompressed);
        decompressed = NULL;
    }
} Drawable;
}
#endif
namespace PNG {
const unsigned char raw_hero[] = {0x65,0x6c,0x0,0xe,0x11,0x12,0x10,0x1,0x5,0x1b,0x13,0x1c,0x1d,0x15,0x14,0x17,0x16,0x18,0x1a,0x7,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x85,0x80,0x0,0x1a,0x52,0x68,0x89,0xa2,0x26,0x81,0x22,0xae,0x7b,0x92,0x6b,0x92,0x6b,0x92,0x7a,0xb8,0x39,0x92,0x2a,0x48,0xa9,0x22,0xa4,0x8a,0x92,0x2,0xe2,0x22,0x68,0x89,0xa2,0x26,0x88,0x9a,0x22,0xd,0xa2,0x26,0x88,0x9a,0x22,0x68,0x89,0xa2,0x20,0xda,0x22,0x68,0x89,0xa2,0x26,0x88,0x9a,0x22,0xd,0xe6,0x88,0x9a,0x22,0x68,0x89,0xa2,0x26,0x83,0x99,0x22,0xa4,0x8a,0x92,0x2a,0x48,0xa9,0x20,0xed,0x63,0x16,0x31,0x63,0x16,0x31,0x60,0xfa,0x3e,0x3e,0x3e,0x3e,0x0,0x6c,0xb9,0xa2,0x26,0x88,0x9a,0x4,0x8a,0xb9,0xee,0x49,0xae,0x49,0xae,0x49,0xea,0xe0,0xdf,0x93,0x88,0x92,0x2a,0x48,0xa9,0x22,0x39,0x38,0x38,0x92,0xe,0xa4,0x81,0x22,0x22,0x68,0x89,0xa2,0x20,0x46,0x88,0x9a,0x22,0x68,0x89,0xa2,0x26,0x88,0x83,0x68,0x89,0xe6,0x88,0x9a,0x22,0x69,0xe2,0x20,0xde,0x68,0x99,0x22,0xa4,0x8a,0x92,0x26,0x68,0x39,0x92,0x2e,0xa3,0x2a,0x32,0xa2,0xe4,0x83,0xba,0x8e,0x8f,0x8f,0x8d,0xa8,0x3e,0x8e,0x43,0x90,0xe4,0x3e,0x1,0xfd,0x20,0xc3,0x1,0xa0,0x40,0x83,0x81,0x71,0x8a,0x10,0x21,0xa6,0x5,0xa2,0x88,0x14,0x66,0x46,0x9,0x10,0xa4,0x90,0xa4,0x26,0x30,0xe2,0x44,0x19,0x19,0x2,0x58,0xbb,0x8b,0x88,0x62,0xce,0x28,0xe3,0x90,0x25,0x88,0xab,0x88,0xa8,0x98,0xd3,0x1e,0x8e,0x64,0x56,0x9,0x62,0x2a,0xe2,0x2a,0x17,0x28,0xb3,0x8,0xe9,0x82,0x69,0xde,0xe7,0x78,0x61,0x8c,0x30,0x81,0x0,0x9a,0x6d,0x6e,0x6d,0x60,0x9c,0x83,0x8,0xa,0x26,0x4e,0x29,0x38,0x19,0xa9,0x8d,0x60,0x39,0x40,0x0,0xba,0x0,0x0,0x56,0xd1,0x91,0x90,0x65,0xe,0x43,0x90,0xf8,0xf8,0xb4,0x52,0x10,0x84,0x20,0x61,0xe,0x43,0x90,0xf8,0xf8,0xb4,0x52,0x10,0x84,0x20,0x1b,0x51,0x91,0x90,0x9,0xa4,0x39,0xe,0x43,0x90,0xe4,0xf,0xa3,0xe3,0xe3,0xe3,0xe0,0xfe,0x3e,0x3e,0x3e,0x3e,0xf,0xe3,0xe3,0xe3,0xe3,0xe2,0x88,0x42,0x2,0x98,0xf8,0xf8,0xf8,0xf8,0x93,0x23,0x1,0xc8,0xc8,0xc0,0x9c,0x83,0x8,0x30,0x83,0x8,0x30,0x87,0x32,0x30,0x27,0xd0,0xaf,0x58,0x8f,0x58,0x8f,0x58,0xad,0x8,0x21,0x8,0x9,0x54,0x94,0x65,0x25,0x19,0x49,0x46,0x52,0x51,0x94,0x94,0x52,0x10,0x80,0x94,0x51,0x85,0x18,0x51,0x85,0x18,0x51,0xe5,0x60,0x9c,0x40,0x81,0x2,0x4,0x8,0x10,0x20,0x40,0x89,0xe0,0x9c,0x40,0x81,0x2,0x4,0x8,0x10,0x20,0x40,0x89,0xe0,0x9c,0x40,0x81,0x2,0x4,0x8,0x10,0x20,0x40,0x89,0xe0,0xa0,0xc2,0x8c,0x28,0xc2,0x8c,0x28,0xc2,0x67,0x82,0x92,0xc,0x20,0xc2,0xc,0x20,0xc2,0x4,0xa0,0xae,0x3e,0x3e,0x3e,0x3e,0x0,0x8f,0x50,0xe4,0x39,0xf,0x8f,0x83,0xe4,0x39,0xe,0x43,0xe3,0xe0,0x13,0xf4,0x39,0xe,0x43,0x90,0xe4,0xf,0xa3,0xe3,0xe3,0xe3,0xe0,0xfe,0x3e,0x3e,0x3e,0x3e,0xf,0xe3,0xe3,0xe3,0xe3,0xe0,0xfe,0x3e,0x3e,0x3e,0x3e,0x2,0xf8,0x83,0x8,0x30,0x83,0x8,0x30,0x80,0xf3,0x42,0xbd,0x62,0x3d,0x62,0x3d,0x62,0xb4,0xe,0xb2,0x67,0x52,0x51,0x94,0x94,0x65,0x25,0x1f,0x26,0xd,0xd4,0x94,0x61,0x46,0x14,0x61,0x46,0x52,0x50,0x36,0x14,0x71,0x2,0x4,0x8,0x10,0x71,0x40,0xdc,0x40,0x81,0x2,0x4,0x8,0x10,0x20,0x40,0x38,0x10,0x24,0xc2,0x8c,0x28,0xc2,0x44,0x3,0x93,0xb,0x20,0xc2,0xc,0x20,0xb3,0x3,0xb2,0xd,0x43,0x90,0xe4,0x34,0x80,0xf5,0xe,0x8f,0x8f,0x8f,0x40,0xfa,0xf,0xe0,0x2f,0xe1,0x8,0x1b,0x90,0xe4,0x6,0xd2,0xc,0x20,0x1a,0xcc,0x28,0xc0,0x66,0x48,0xc9,0x24,0x8c,0x90,0x18,0x90,0xa4,0x90,0xa4,0x6,0x72,0xc,0x20,0x19,0xec,0xca,0xec,0xca,0x6,0x3a,0x3a,0xba,0x3a,0x81,0x8e,0x8e,0xae,0x8e,0xa0,0x63,0xce,0xef,0x3b,0x81,0x8f,0x36,0xaf,0x36,0xa0,0x63,0xa2,0xae,0xe8,0xab,0x81,0xa1,0xe,0x40,0x3a,0x0,0x0,0x47,0x40,0x0,0x88,0x43,0xe3,0xe3,0xe3,0x90,0x3b,0x30,0xa3,0x9,0x10,0x24,0xc2,0x8c,0xe,0x52,0x20,0x84,0x88,0x76,0x8a,0x77,0x20,0x87,0x20,0x38,0x48,0x82,0x12,0x21,0xda,0x29,0xdc,0x82,0x1c,0x80,0xdc,0x51,0x85,0x14,0x61,0x45,0x18,0x50,0x36,0x22,0x21,0x48,0x8c,0xca,0x8e,0xc8,0x8c,0x52,0x22,0x3,0x67,0x31,0x49,0x52,0x32,0xd4,0xac,0x95,0x21,0x5c,0xc0,0xd9,0xe9,0x94,0x9a,0x23,0x2e,0x8a,0xc9,0xa2,0x15,0xe9,0x83,0x67,0x92,0x5a,0xea,0xad,0x2e,0xb6,0xd3,0xa2,0x15,0x52,0x60,0xd9,0xe9,0x94,0x9a,0x23,0x2e,0x8a,0xc9,0xa2,0x15,0x52,0x60,0xd9,0xe9,0x94,0x9a,0x23,0x2e,0x8a,0xc9,0xa2,0x15,0xe9,0x83,0x64,0x64,0x54,0x21,0x34,0x29,0x34,0x21,0x15,0x19,0x3,0x6c,0xd9,0x68,0xca,0xec,0xce,0xe8,0xca,0x5c,0xd8,0x38,0x56,0x25,0xc8,0x21,0xc8,0x21,0xc8,0x25,0x58,0x38,0xa2,0x29,0xa8,0x8a,0x6a,0x22,0x9a,0x88,0xa6,0xa2,0x28,0x36,0x88,0x9a,0x22,0x68,0x89,0xa2,0x26,0x88,0x83,0x89,0x22,0xa4,0x8a,0x92,0x2a,0x48,0xa9,0x20,0xeb,0xa8,0xae,0xa2,0xba,0x8a,0xea,0x2b,0xa8,0x39,0x55,0x42,0x15,0x50,0x85,0x54,0x21,0x55,0x8,0x55,0x40,0xe4,0xc2,0x8c,0x28,0xc2,0x8c,0x28,0xc0,0xec,0x83,0x8,0x30,0x83,0x8,0x30,0x80,0xfa,0x3e,0x3e,0x3e,0x3e,0x1,0x3f,0x43,0xe3,0xe3,0xe3,0x90,0x3b,0x30,0xa3,0x9,0x10,0x24,0xc2,0x8c,0xe,0x52,0x20,0x84,0x88,0x76,0x8a,0x77,0x20,0x87,0x20,0x38,0x48,0x82,0x12,0x21,0xda,0x29,0xdc,0x82,0x1c,0x80,0xdc,0x51,0x85,0x14,0x61,0x45,0x18,0x50,0x36,0x22,0x21,0x48,0x8c,0xca,0x8e,0xc8,0x8c,0x52,0x22,0x3,0x67,0x31,0x49,0x52,0x32,0xd4,0xac,0x95,0x21,0x5c,0xc0,0xd9,0xe9,0x94,0x9a,0x23,0x2e,0x8a,0xc9,0xa2,0x15,0xe9,0x83,0x67,0x92,0x5a,0xea,0xad,0x2e,0xb6,0xd3,0xa2,0x15,0x52,0x60,0xd9,0xe9,0x94,0x9a,0x23,0x2e,0x8a,0xc9,0xa2,0x15,0x52,0x60,0xd9,0xe9,0x94,0x9a,0x23,0x2e,0x8a,0xc9,0xa2,0x15,0xe9,0x83,0x64,0x64,0x54,0x21,0x34,0x29,0x34,0x21,0x15,0x19,0x3,0x6c,0xd9,0x68,0xca,0xec,0xce,0xe8,0xca,0x5c,0xd8,0x38,0x56,0x25,0xc8,0x21,0xc8,0x21,0xc8,0x25,0x58,0x39,0xc9,0x9e,0x88,0xa6,0xa2,0x29,0xa8,0x8a,0x7c,0x98,0x37,0xa2,0x29,0x91,0xe6,0x47,0x99,0x1e,0x6a,0x22,0x83,0x64,0x79,0xf9,0x22,0x39,0x22,0x39,0x27,0x47,0x83,0x7e,0x48,0x86,0xb8,0x86,0xb8,0x86,0xb8,0x8e,0x48,0x38,0x6b,0x89,0x74,0x29,0xd0,0xa7,0x42,0x5a,0xe0,0xe5,0xd0,0xb5,0x8c,0x58,0xc5,0x8b,0x74,0xe,0xd6,0x35,0xe,0x43,0x90,0xd5,0x83,0xd4,0x3a,0x3e,0x3e,0x3d,0x3,0xe8,0x3f,0x81,0xe6,0x3d,0xa,0x96,0x6,0x84,0xd3,0x26,0x5a,0xc8,0x5,0xc2,0x48,0x51,0x4e,0x84,0x1,0x45,0x15,0x10,0xa4,0x66,0x5a,0x21,0xa0,0x4a,0x6d,0x12,0x21,0x11,0x1d,0x91,0x9,0x81,0x1d,0x34,0x78,0x89,0x50,0x86,0xd0,0x98,0x4e,0x2e,0xe2,0xe2,0x58,0xb9,0x66,0x8a,0xb4,0x29,0x24,0x2e,0xd,0xd5,0x9,0x9e,0x42,0x8,0xb4,0x29,0x24,0x2e,0xd,0xee,0x21,0x1e,0xcc,0x7b,0x20,0x84,0x90,0xb8,0x34,0x55,0x47,0x21,0xad,0xd1,0xe9,0xa9,0xd2,0x42,0xe0,0xd1,0x26,0x20,0x85,0x91,0x59,0xaf,0x59,0x91,0x20,0x50,0x23,0x44,0x31,0xaf,0x42,0x11,0x20,0x54,0x67,0x29,0x11,0x29,0x91,0x9a,0x8,0x90,0xe4,0xb,0x88,0x71,0x62,0x10,0x20,0x43,0x90,0x3e,0x20,0xc2,0x0,0x96,0x0,0x45,0x60,0x0,0x86,0x43,0x98,0xd6,0x35,0x8d,0x40,0xf9,0x8d,0x20,0xc2,0xc,0x20,0xc6,0x29,0x5,0x90,0x65,0x8d,0x20,0xb3,0xb,0x20,0xc2,0x8,0xa9,0x51,0x91,0x48,0x18,0x63,0x48,0x2c,0xc2,0xc8,0x30,0x82,0x2a,0x54,0x64,0x52,0x6,0x18,0xd2,0xb,0x30,0xb2,0xc,0x62,0x90,0x59,0x6,0x90,0xd4,0x39,0xe,0x43,0xd0,0x3d,0x8f,0xa8,0xca,0x8c,0xa8,0xc8,0x3f,0xd0,0xcd,0xc,0xd0,0xcd,0xc,0xd0,0x3c,0xc8,0x75,0xd5,0x19,0x75,0x88,0x74,0x2e,0x90,0x3c,0xd0,0xcd,0xc,0xd0,0xcd,0xb,0xa4,0x20,0x84,0x20,0x28,0xd0,0xcd,0xc,0xd0,0xcd,0xc,0xd0,0x82,0x10,0x80,0x74,0x21,0x8,0xa,0x50,0xe4,0x39,0xe,0x43,0x90,0x92,0x10,0x80,0xaa,0x2e,0xea,0x22,0xea,0x22,0xea,0x32,0x29,0x19,0x2,0x65,0x25,0x19,0x49,0x46,0x52,0x51,0x94,0x94,0x65,0x25,0x1e,0x64,0x9,0x85,0x18,0x51,0x85,0x18,0x51,0x85,0x14,0x85,0x60,0x98,0x40,0x81,0x2,0x4,0x8,0x10,0x20,0x41,0xd9,0x18,0x27,0x10,0x20,0x40,0x81,0x2,0x4,0x8,0x10,0x76,0x54,0x9,0xc4,0x8,0x10,0x20,0x40,0x81,0x2,0x4,0x1e,0x74,0xa,0xc,0x28,0xc2,0x8c,0x28,0xc2,0x8c,0x22,0x78,0x2a,0x20,0xc2,0xc,0x20,0xc2,0xc,0x20,0x94,0xc,0xe3,0xe3,0xe3,0xe3,0xe2,0xa0,0x13,0x24,0x39,0x8d,0x63,0x58,0xd4,0xf,0x98,0xd2,0xc,0x20,0xc2,0xc,0x60,0xf5,0x8d,0x20,0xb3,0xb,0x20,0xc2,0x3,0xc6,0x34,0x82,0xcc,0x2c,0x83,0x8,0xf,0x18,0xd2,0xb,0x30,0xb2,0xc,0x60,0xf9,0xd,0x43,0x90,0xe4,0x3d,0x3,0xd8,0xfa,0x8c,0xa8,0xca,0x8c,0x83,0xfd,0xc,0xd0,0xcd,0xc,0xd0,0xcd,0x3,0xcc,0x87,0x5d,0x51,0x97,0x58,0x87,0x42,0xe9,0x3,0xcd,0xc,0xd0,0xcd,0xc,0xd0,0xba,0x40,0xf3,0x43,0x34,0x33,0x43,0x34,0x33,0x40,0x2f,0x50,0xe4,0x39,0xe,0x43,0x90,0x3f,0x8b,0xba,0x88,0xba,0x88,0xba,0x8c,0x83,0xbc,0x99,0xd4,0x94,0x65,0x25,0x19,0x49,0x47,0xc9,0x83,0x75,0x25,0x18,0x51,0x85,0x18,0x51,0x94,0x94,0xd,0x85,0x1c,0x40,0x81,0x2,0x4,0x1c,0x50,0x37,0x10,0x20,0x40,0x81,0x2,0x4,0x8,0x10,0xe,0x4,0x9,0x30,0xa3,0xa,0x30,0x91,0x0,0xe4,0xc2,0xc8,0x30,0x83,0x8,0x2c,0xc0,0xec,0x83,0x50,0xe4,0x39,0xd,0x20,0x3d,0x43,0xa3,0xe3,0xe3,0xd0,0x3e,0x83,0xf8,0x3f,0x84,0x20,0xa2,0x3d,0xa,0x96,0x9,0x23,0xa0,0xd1,0x34,0xc9,0x96,0xb2,0x7,0x23,0xea,0xb,0x9,0x21,0x45,0x3a,0x10,0x1b,0xe3,0x38,0x24,0x45,0x44,0x29,0x19,0x96,0x88,0x68,0x65,0x63,0x34,0x1d,0x6d,0x12,0x21,0x11,0x1d,0x91,0x9,0x84,0xd3,0x23,0x49,0x36,0x44,0x16,0x4d,0x1e,0x22,0x54,0x21,0xb4,0x26,0x14,0x8b,0xb8,0xb8,0x86,0x2e,0x59,0xa2,0xad,0xa,0x49,0xb,0x85,0xc8,0x30,0x83,0x15,0x9,0x9e,0x42,0x8,0xb4,0x29,0x24,0x2e,0x12,0xb3,0x2b,0xb3,0x28,0x8b,0x88,0x47,0xb3,0x1e,0xc8,0x21,0x24,0x2e,0x12,0xa3,0xab,0xa3,0xa9,0x55,0x51,0xc8,0x6b,0x74,0x7a,0x6a,0x74,0x90,0xb8,0x4a,0x8e,0xae,0x8e,0xa5,0x49,0x88,0x21,0x64,0x56,0x6b,0xd6,0x64,0x48,0x7a,0x8c,0x93,0xa3,0x24,0x15,0x23,0x44,0x31,0xaf,0x42,0x11,0x21,0xea,0x2f,0x4e,0x8b,0xd0,0x65,0x9c,0xa4,0x44,0xa6,0x46,0x68,0x76,0x92,0xae,0xe9,0x2a,0xe0,0xa0,0x87,0x16,0x21,0x1,0xc0,0x83,0x8,0x2,0x58,0x0,0x51,0x40,0x18,0x83,0x8,0x30,0x83,0x8,0x30,0x80,0xef,0xd0,0xae,0xa2,0x56,0x90,0x9e,0xa2,0xbd,0x8,0x46,0x46,0x46,0x41,0x74,0x96,0x21,0x22,0x1e,0x52,0x1f,0xc8,0x23,0xc8,0x6a,0x92,0xa4,0x21,0x2a,0x15,0x2e,0xa6,0xdd,0x65,0xb5,0x29,0x69,0x48,0x6a,0x52,0x12,0x4a,0xd6,0x92,0x4b,0x58,0x50,0xba,0x9b,0x75,0x96,0xc4,0x16,0x94,0x86,0xa5,0x21,0x24,0xad,0x69,0x24,0xb5,0x84,0xc8,0x93,0x91,0x72,0x2b,0x94,0xdb,0xb1,0x4,0xb1,0x4,0xa9,0x2a,0x42,0x12,0xa1,0x42,0x7b,0xb4,0xbd,0x3e,0x6d,0xbe,0x5c,0xce,0x4c,0xa5,0x46,0x46,0x46,0x41,0x52,0x3b,0xb4,0x93,0xbe,0x5b,0x27,0x92,0xca,0xee,0x8a,0xd,0x8,0xba,0xb3,0x77,0xe5,0xf3,0x64,0xf2,0xbb,0xf2,0x3,0x4d,0x2c,0x8d,0x25,0xcb,0xaa,0xfa,0x7a,0xff,0x6e,0xab,0x59,0x8,0x42,0x2,0x4d,0x2b,0x4d,0x25,0xe9,0x65,0xfa,0x79,0x3f,0x6e,0x5d,0x6c,0xc8,0xc0,0x8c,0x8b,0xab,0x37,0x2e,0x89,0xcd,0xa7,0xca,0xef,0xc8,0xb2,0x54,0x98,0x22,0x12,0xac,0x76,0x86,0xe8,0x5b,0xa1,0x2b,0x25,0x49,0x82,0x22,0xc9,0xb7,0x57,0x7e,0x95,0xa7,0xf5,0x76,0xf7,0x32,0xc9,0x52,0x60,0x8f,0x36,0x5a,0x32,0xbb,0x33,0xba,0x32,0x97,0x36,0x4d,0x6b,0x58,0x25,0x9a,0x22,0x68,0x89,0xa2,0x26,0x88,0x9a,0x5a,0xeb,0x58,0x25,0x10,0x20,0x40,0x81,0x2,0x4,0x8,0x10,0x5a,0xeb,0x58,0x25,0xc9,0x88,0xc9,0x88,0xc9,0x88,0xc9,0x88,0xc9,0x9b,0xea,0x90,0x26,0xf5,0x88,0xf5,0x88,0xf5,0x88,0xf5,0x88,0xf5,0x9b,0xef,0x40,0xa2,0xa3,0x2a,0x32,0xa3,0x2a,0x32,0xa2,0x2a,0x4d,0x1,0xd2,0xa4,0xa8,0x1d,0x2a,0x5e,0x7,0x4e,0x78,0x1d,0xa0,0xc8,0x83,0x8,0x30,0x83,0x8,0x30,0x80,0xef,0xd0,0xae,0xa2,0x56,0x90,0x9e,0xa2,0xbd,0x3,0x94,0x96,0x21,0x22,0x1e,0x52,0x1f,0xc8,0x23,0xc8,0xd,0xcb,0xa9,0xb7,0x59,0x6d,0x4a,0x5a,0x52,0x1a,0x94,0x80,0xd8,0xba,0x9b,0x75,0x96,0xc4,0x16,0x94,0x86,0xa5,0x20,0x35,0x22,0x4e,0x45,0xc8,0xae,0x53,0x6e,0xc4,0x12,0xc4,0x3,0x42,0x7b,0xb4,0xbd,0x3e,0x6d,0xbe,0x5c,0xce,0x4c,0xa0,0xd0,0x8e,0xed,0x24,0xef,0x96,0xc9,0xe4,0xb2,0xbb,0xa2,0x83,0x42,0x2e,0xac,0xdd,0xf9,0x7c,0xd9,0x3c,0xae,0xfc,0x80,0xd3,0x4b,0x23,0x49,0x72,0xea,0xbe,0x9e,0xbf,0xdb,0xaa,0xd6,0xd,0x34,0xad,0x34,0x97,0xa5,0x97,0xe9,0xe4,0xfd,0xb9,0x75,0x83,0x42,0x2e,0xac,0xdc,0xba,0x27,0x36,0x9f,0x2b,0xbf,0x20,0x34,0x12,0xac,0x76,0x86,0xe8,0x5b,0xa1,0x20,0xd0,0xb2,0x6d,0xd5,0xdf,0xa5,0x69,0xfd,0x5d,0xbd,0xcc,0xd,0x73,0x65,0xa3,0x2b,0xb3,0x3b,0xa3,0x29,0x73,0x60,0x47,0x9a,0x22,0x68,0x89,0xa0,0x48,0x9a,0x24,0xe2,0x4e,0x24,0xe2,0x26,0x83,0x93,0x89,0xc8,0x2b,0x20,0xac,0x82,0x8e,0xe,0x72,0xc,0x58,0xc5,0x8c,0x58,0xac,0x80,0xf1,0x63,0x63,0xe3,0xe3,0x96,0xf,0x63,0xe3,0xe3,0xe3,0xe0,0xfe,0xf,0xe0,0x19,0x49,0x60,0x68,0x42,0x9,0x96,0xb2,0x1,0x86,0xa5,0x44,0x23,0xa4,0x58,0x6f,0x8c,0xe0,0xb4,0x9a,0x92,0x84,0x69,0x7,0x53,0x5b,0x49,0x3d,0x34,0x9,0x45,0x13,0x11,0x92,0x2a,0x12,0x22,0x22,0x10,0x9b,0x20,0x5d,0x8a,0x10,0x6d,0xa7,0x4e,0x2a,0x12,0xaa,0x22,0xa4,0xa8,0x8a,0xa1,0x62,0x88,0x14,0x4d,0x91,0xea,0x32,0x11,0xae,0x4e,0x92,0xe4,0xea,0x22,0x30,0xe5,0x18,0x4d,0x19,0x6a,0x1e,0xa2,0x11,0x24,0x88,0x44,0xa7,0x62,0xce,0x44,0x84,0x8e,0x5a,0x87,0xab,0x45,0xa4,0xb4,0x5a,0x88,0x8d,0x31,0x2b,0x10,0x4d,0x15,0xea,0x1e,0xa8,0x8a,0x4a,0x22,0xa1,0x62,0x96,0x43,0x93,0xfa,0x79,0x21,0xda,0xa8,0x84,0xaa,0x22,0x17,0x66,0x48,0x41,0x3c,0x46,0x48,0x76,0xb8,0x94,0xb8,0x98,0x21,0x24,0x86,0xaa,0x22,0x82,0x3a,0x47,0xa4,0x91,0xea,0xc,0x5e,0x44,0x21,0x6,0xd6,0x6d,0x25,0x45,0xd0,0x37,0x20,0x2b,0x30,0xb2,0x81,0x94};
Prips::Drawable *hero;
};
int f;
int line;
int subline;
int shipAngle;
int shipX;
int shipY;
typedef struct Bullet {
    bool ally;
    int x, y;
    int dx, dy;
    Bullet *next;
    Bullet(bool isHero, int _x, int _y, int _dx, int _dy) {
        ally = isHero;
        x = _x;
        y = _y;
        dx = _dx;
        dy = _dy;
        next = 0;
    }
} Bullet;
typedef struct Enemy {
    int type;
    int x, y, cx, cy;
    int dying;
    Enemy *next;
    Enemy(int _type, int _x, int _y, int _cx, int _cy) {
        x = _x;
        y = _y;
        cx = _cx;
        cy = _cy;
        type = _type;
        next = 0;
        dying = 0;
    }
    void update();
    void explode();
} Enemy;
Bullet* bullets = NULL;
Enemy* enemies = NULL;
// helper functions
void drawBackground();
void updateBackground();
void updateBullets();
void updateEnemies();
void addEnemy(int type, int x, int y, int cx, int cy);
void addEnemyBullet(int x, int y, int dx, int dy);
void addHeroBullet(int x, int y);
void updateShip();
void drawShip();
void drawHUD();
void drawBullets();
void drawEnemies();
// exported from tiled editor
// it's ok to be on ROM (const)
const unsigned int map[256][16] = {{ 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
    { 58,57,58,59,88,35,96,97,98,99,100,97,97,98,99,100},
    { 74,73,74,75,39,40,131,34,34,34,34,34,34,34,34,34},
    { 73,74,90,87,88,35,132,34,34,34,34,34,34,34,34,34},
    { 89,90,35,96,97,98,148,34,34,34,34,34,34,34,34,34},
    { 98,99,100,148,34,34,34,34,34,34,34,34,34,34,113,115},
    { 34,34,34,34,34,34,34,34,34,113,114,115,114,115,165,35},
    { 34,34,34,34,34,113,115,114,115,165,35,0,1,2,3,3},
    { 34,34,34,34,113,165,35,87,88,35,35,16,17,18,19,19},
    { 34,34,34,113,165,39,40,35,0,1,2,66,67,43,37,38},
    { 34,34,34,149,35,35,87,88,16,17,18,82,51,52,53,69},
    { 114,114,115,165,0,1,2,3,66,67,39,40,52,53,54,53},
    { 35,35,39,40,16,17,18,19,82,37,38,52,53,69,70,69},
    { 45,46,44,35,32,33,35,43,52,53,54,53,54,53,54,53},
    { 61,62,63,35,48,49,35,35,68,69,70,69,70,69,70,71},
    { 77,78,79,44,32,33,39,40,43,68,69,53,54,53,54,55},
    { 93,79,44,35,48,49,35,35,51,52,53,69,70,69,70,71},
    { 39,40,43,40,32,33,39,39,40,85,86,85,86,85,86,43},
    { 97,98,99,101,32,33,96,97,97,99,99,99,99,99,99,97},
    { 211,34,34,129,32,33,132,34,34,34,34,34,34,34,34,34},
    { 210,211,34,129,32,33,132,34,210,211,210,211,210,210,211,210},
    { 210,211,34,129,48,49,132,34,210,211,34,210,211,34,34,34},
    { 210,211,34,145,146,147,148,210,210,211,210,211,211,210,210,211},
    { 210,210,211,34,34,34,210,211,211,211,34,34,34,210,210,211},
    { 211,210,211,210,211,211,34,210,211,34,210,210,211,210,211,34},
    { 34,34,34,34,210,210,211,34,34,34,34,34,34,34,34,34},
    { 34,210,211,34,210,211,34,34,34,34,34,34,159,34,34,34},
    { 34,34,34,34,210,211,34,34,34,34,34,211,34,34,34,211},
    { 34,34,34,159,34,34,34,34,34,34,34,211,114,115,116,34},
    { 34,34,34,34,34,34,34,34,34,34,211,129,155,156,132,34},
    { 34,34,34,34,34,34,34,34,34,211,34,145,146,147,148,211},
    { 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},
    { 34,34,34,34,34,34,34,34,34,34,211,34,34,211,211,34},
    { 34,211,211,211,34,34,34,34,34,34,34,34,34,159,34,34},
    { 113,114,115,116,159,34,34,34,34,34,34,34,34,34,34,34},
    { 129,35,44,132,34,211,211,34,34,34,34,34,34,34,34,34},
    { 145,146,147,148,34,34,34,34,34,34,34,34,34,34,34,34},
    { 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},
    { 34,34,34,159,34,34,34,210,211,34,34,34,34,210,210,211},
    { 34,34,34,34,34,34,34,210,211,34,34,34,34,34,34,34},
    { 34,34,210,211,159,34,34,34,34,34,34,34,34,34,34,34},
    { 159,34,34,34,34,34,34,34,34,34,34,34,210,211,34,34},
    { 34,34,34,34,210,211,34,34,159,34,34,34,34,34,210,211},
    { 34,210,113,114,115,116,34,34,34,34,210,211,34,34,159,34},
    { 34,34,129,87,35,132,34,34,34,34,34,34,34,34,34,34},
    { 34,113,165,35,87,160,34,34,210,211,34,34,34,113,162,163},
    { 34,129,6,7,47,35,160,116,34,34,34,34,34,133,35,52},
    { 34,129,22,23,35,44,35,132,34,159,34,34,34,133,35,68},
    { 34,129,47,35,84,47,96,148,34,34,34,34,210,133,35,37},
    { 34,129,35,44,47,96,148,210,210,211,34,34,34,133,52,53},
    { 159,129,87,35,96,148,34,210,210,211,34,34,210,133,68,69},
    { 159,145,146,147,148,210,211,159,211,211,159,210,210,133,35,68},
    { 34,34,159,211,34,210,211,34,34,34,34,34,210,133,43,35},
    { 159,159,159,159,34,159,159,34,159,211,211,210,210,145,101,43},
    { 34,159,34,34,210,210,159,159,159,211,34,210,159,159,145,101},
    { 34,34,210,211,34,211,34,34,34,34,159,159,159,210,211,145},
    { 210,211,210,211,159,159,34,210,211,34,34,34,34,210,211,34},
    { 210,211,34,210,211,211,211,34,210,211,34,34,34,34,34,34},
    { 34,34,210,210,34,159,159,34,34,159,34,34,159,159,34,34},
    { 34,34,34,34,159,34,34,34,34,34,34,34,210,159,34,159},
    { 194,194,194,194,194,194,195,194,194,195,196,34,34,34,34,34},
    { 50,50,175,175,50,50,191,50,251,50,240,196,193,242,243,244},
    { 251,175,235,50,203,50,50,235,50,251,50,212,209,173,174,251},
    { 175,175,203,50,50,203,50,50,50,251,191,212,209,189,190,50},
    { 110,109,110,109,110,109,110,109,110,50,50,212,209,50,50,175},
    { 126,125,126,125,126,125,126,125,126,127,235,212,209,251,251,50},
    { 142,141,142,141,142,141,142,141,142,143,176,228,209,50,191,219},
    { 158,157,158,157,158,157,158,157,158,176,228,34,225,181,50,50},
    { 180,180,177,178,177,177,177,180,177,228,34,211,159,225,181,203},
    { 210,34,210,34,113,161,161,161,161,161,161,162,163,116,225,226},
    { 161,162,163,164,165,43,43,35,123,43,35,123,35,160,161,161},
    { 167,167,168,169,167,168,169,167,168,169,52,55,167,168,167,168},
    { 10,11,123,6,7,35,43,8,9,84,68,71,43,35,47,84},
    { 26,27,35,22,23,10,11,24,25,84,87,88,35,6,7,35},
    { 123,8,9,123,35,26,27,88,39,40,6,7,35,22,23,10},
    { 35,24,25,43,43,137,6,7,153,35,22,23,35,35,43,26},
    { 167,167,167,168,169,170,43,156,166,167,167,167,6,7,167,168},
    { 2,3,3,2,2,3,2,3,3,2,3,2,2,3,3,3},
    { 35,156,47,35,43,44,35,44,47,96,98,99,99,98,98,98},
    { 146,147,100,101,44,155,35,43,35,132,113,163,164,114,114,114},
    { 162,163,116,145,146,99,99,99,98,148,149,52,55,43,87,35},
    { 41,42,160,161,115,115,115,115,162,164,165,68,71,87,43,47},
    { 57,58,42,168,168,41,42,35,43,87,43,137,168,56,42,168},
    { 73,57,58,42,41,57,58,59,167,168,169,170,56,57,58,42},
    { 72,73,74,57,58,73,57,58,59,41,42,56,57,58,73,74},
    { 88,89,90,73,74,57,58,57,58,57,58,57,58,57,58,57},
    { 51,56,59,89,90,73,74,73,74,73,74,73,74,73,74,73},
    { 155,72,75,35,51,89,90,89,90,73,74,89,90,73,74,57},
    { 98,99,100,101,39,45,46,40,51,89,90,45,46,89,90,73},
    { 211,159,210,145,101,47,62,63,45,46,45,61,62,63,51,89},
    { 34,34,34,34,117,155,35,77,78,77,78,77,78,94,12,13},
    { 159,34,210,34,145,98,99,100,101,93,94,93,94,35,28,29},
    { 34,210,34,159,113,114,115,116,117,35,35,35,156,155,156,35},
    { 162,163,164,164,165,87,36,144,145,146,146,146,146,146,146,147},
    { 87,36,87,39,40,36,44,160,161,162,162,162,162,162,162,163},
    { 103,103,103,103,104,106,36,91,92,88,88,36,95,44,156,95},
    { 119,119,119,119,120,122,44,107,108,36,44,88,111,155,36,111},
    { 123,47,123,47,123,135,104,104,104,104,104,104,104,104,104,104},
    { 47,123,47,95,47,151,120,120,120,120,120,120,120,120,120,120},
    { 47,47,95,111,91,92,36,43,36,95,91,92,36,43,43,95},
    { 36,95,111,36,107,108,95,91,92,111,107,108,95,91,92,111},
    { 36,111,91,92,36,43,111,107,108,36,43,36,111,107,108,36},
    { 91,92,107,108,102,103,105,103,105,103,103,105,103,105,104,105},
    { 107,108,36,36,118,119,121,119,121,119,119,121,119,121,120,121},
    { 104,105,105,105,136,0,1,2,2,2,2,2,2,3,4,5},
    { 120,121,121,121,152,16,17,102,103,103,103,103,103,106,64,65},
    { 0,1,2,3,3,66,67,118,119,119,119,119,119,122,39,40},
    { 16,17,18,19,19,82,83,134,14,15,156,44,156,135,104,104},
    { 66,67,102,103,103,103,103,136,30,31,155,156,47,151,120,120},
    { 82,83,118,119,119,119,119,152,156,41,42,41,42,42,47,87},
    { 103,104,136,47,14,15,155,155,56,58,57,58,57,58,59,87},
    { 119,120,152,35,30,31,41,42,72,74,73,74,73,74,75,156},
    { 47,35,39,14,15,56,57,58,57,58,57,58,57,58,59,47},
    { 87,156,35,30,31,72,73,74,73,74,73,74,73,74,75,39},
    { 87,47,156,35,47,155,89,90,89,90,73,74,89,90,155,35},
    { 104,105,105,105,106,35,88,155,14,15,89,90,155,102,103,103},
    { 120,121,121,121,122,39,40,88,30,31,155,156,47,118,119,119},
    { 47,156,14,15,138,47,156,35,87,88,39,102,103,136,156,47},
    { 87,88,30,31,154,35,39,39,156,47,35,118,119,152,47,155},
    { 47,155,35,156,135,103,104,104,104,104,104,136,47,47,88,47},
    { 40,88,156,155,151,119,120,120,120,120,120,152,156,35,35,47},
    { 39,40,47,95,91,92,35,95,35,36,35,47,47,95,47,35},
    { 91,92,36,111,107,108,36,111,47,35,95,36,87,111,87,95},
    { 107,108,87,47,87,95,47,40,91,92,111,47,91,92,87,111},
    { 35,95,102,103,106,111,40,95,107,108,47,95,107,108,95,36},
    { 87,111,118,119,122,35,88,111,35,47,88,111,35,88,111,95},
    { 104,105,136,95,135,104,105,104,104,105,104,105,105,105,106,111},
    { 120,121,152,111,151,120,121,120,120,121,120,121,121,121,122,35},
    { 155,155,35,156,35,35,35,156,155,35,35,155,35,156,135,104},
    { 3,3,3,3,3,3,3,3,3,3,3,3,4,5,151,120},
    { 19,19,19,19,19,19,19,19,19,19,19,19,20,21,156,155},
    { 35,47,35,35,39,40,35,39,40,87,88,88,64,65,2,3},
    { 35,35,43,47,139,39,87,88,139,35,35,139,80,81,18,19},
    { 47,47,35,139,35,35,35,139,35,39,40,35,87,88,139,35},
    { 35,44,123,35,35,43,87,35,35,139,35,139,35,47,35,47},
    { 45,46,123,35,139,35,35,139,47,35,35,35,35,139,35,43},
    { 61,62,63,35,123,87,43,35,47,43,139,37,38,37,38,37},
    { 77,78,79,44,35,123,35,139,39,40,54,53,54,53,54,53},
    { 61,62,63,35,35,52,55,52,53,54,70,69,70,69,70,69},
    { 77,78,79,44,87,68,71,68,69,70,54,53,54,53,54,53},
    { 63,79,123,35,35,35,139,40,68,69,70,69,70,69,70,69},
    { 79,44,35,44,35,35,35,35,139,85,86,85,86,85,86,85},
    { 63,35,47,87,88,35,0,1,2,2,2,2,2,2,2,2},
    { 79,47,35,35,35,35,16,17,18,18,18,18,18,18,18,18},
    { 63,35,44,35,6,7,32,33,43,39,40,6,7,35,6,7},
    { 79,44,123,35,22,23,32,33,35,35,43,22,23,35,22,23},
    { 63,47,87,88,87,88,32,33,39,40,43,87,88,43,35,35},
    { 79,47,44,35,35,35,32,33,6,7,35,43,35,39,40,35},
    { 63,35,123,87,87,88,32,33,22,23,87,88,35,8,9,35},
    { 62,63,35,44,35,35,64,65,2,2,2,2,3,24,25,35},
    { 78,62,46,35,35,35,80,81,18,18,18,18,19,35,35,35},
    { 62,61,62,63,47,87,88,35,35,87,88,35,35,35,87,88},
    { 78,77,78,79,35,35,35,35,35,35,35,35,35,35,96,97},
    { 35,93,94,35,35,35,87,88,35,35,35,35,87,88,112,113},
    { 44,123,35,35,35,44,35,35,40,35,39,40,43,35,128,133},
    { 87,88,43,44,40,35,43,35,35,44,35,87,88,40,144,149},
    { 87,96,99,101,96,97,98,101,40,43,35,44,96,98,148,145},
    { 43,128,34,129,132,34,34,133,96,101,39,40,128,34,34,34},
    { 39,144,34,129,132,34,113,165,132,133,87,88,160,114,114,115},
    { 99,148,34,145,148,34,145,146,148,145,101,43,35,96,101,43},
    { 34,34,34,34,34,34,34,34,34,34,145,146,147,148,133,35},
    { 115,116,34,34,34,34,34,34,34,34,34,34,34,34,145,99},
    { 43,132,34,193,194,195,195,194,195,195,194,195,195,195,195,194},
    { 146,148,34,213,235,50,50,50,203,50,50,235,50,124,125,126},
    { 244,243,244,245,236,237,251,50,50,50,50,235,203,140,141,142},
    { 109,110,203,50,252,253,182,183,183,184,185,186,50,124,125,126},
    { 125,126,127,251,50,50,198,199,199,200,201,202,251,140,141,142},
    { 126,125,126,127,109,110,214,203,204,205,219,218,50,50,124,125},
    { 142,141,142,143,140,143,230,235,220,221,251,234,173,174,140,141},
    { 158,157,158,235,251,50,214,191,191,191,175,218,189,190,50,235},
    { 50,235,50,50,50,203,230,175,191,175,191,234,219,50,50,251},
    { 185,185,185,185,185,185,216,191,191,191,191,215,185,185,185,185},
    { 201,201,201,201,201,201,232,175,175,175,50,231,201,201,201,201},
    { 177,180,177,178,177,178,177,180,180,177,177,177,177,178,177,180},
    { 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},
    { 34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34},
    { 34,34,34,34,34,34,34,34,34,34,193,194,195,194,194,194},
    { 34,193,242,243,242,243,196,34,34,193,245,50,191,175,236,237},
    { 244,245,173,174,124,127,240,194,195,245,50,203,171,172,252,253},
    { 50,191,189,190,140,143,50,50,203,50,50,50,187,188,50,219},
    { 50,235,50,50,50,175,50,50,50,175,236,237,50,175,50,50},
    { 191,50,219,50,175,50,124,127,235,50,252,253,50,191,236,237},
    { 177,178,179,180,181,50,140,143,50,191,50,175,50,50,252,253},
    { 34,34,34,34,225,178,179,180,178,179,181,50,50,235,203,50},
    { 34,34,113,162,163,162,163,164,116,34,225,181,219,50,50,50},
    { 162,163,165,60,63,44,45,46,160,116,34,225,177,178,179,180},
    { 87,88,44,76,79,60,61,62,63,160,162,163,162,162,163,164},
    { 103,103,104,105,106,76,77,78,79,44,52,55,43,44,52,55},
    { 119,119,120,121,122,35,93,94,35,43,68,71,44,43,68,71},
    { 2,3,4,5,135,103,104,105,104,105,103,104,105,103,104,105},
    { 18,19,20,21,151,119,120,121,120,121,119,120,121,119,120,121},
    { 39,88,64,65,2,3,3,2,2,3,2,3,3,2,2,3},
    { 42,41,42,81,18,19,19,18,18,19,18,19,19,18,18,19},
    { 58,57,58,59,88,35,96,97,98,99,100,97,97,98,99,100},
    { 74,73,74,75,39,40,131,34,34,34,34,34,34,34,34,34},
    { 73,74,90,87,88,35,132,34,34,34,34,34,34,34,34,34},
    { 89,90,35,96,97,98,148,34,34,34,34,34,34,34,34,34},
    { 98,99,100,148,34,34,34,34,34,34,34,34,34,34,113,115},
    { 34,34,34,34,34,34,34,34,34,113,114,115,114,115,165,35},
    { 34,34,34,34,34,113,115,114,115,165,35,0,1,2,3,3},
    { 34,34,34,34,113,165,35,87,88,35,35,16,17,18,19,19},
    { 34,34,34,113,165,39,40,35,0,1,2,66,67,43,37,38},
    { 34,34,34,149,35,35,87,88,16,17,18,82,51,52,53,69},
    { 114,114,115,165,0,1,2,3,66,67,39,40,52,53,54,53},
    { 35,35,39,40,16,17,18,19,82,37,38,52,53,69,70,69},
    { 45,46,44,35,32,33,35,43,52,53,54,53,54,53,54,53},
    { 61,62,63,35,48,49,35,35,68,69,70,69,70,69,70,71},
    { 77,78,79,44,32,33,39,40,43,68,69,53,54,53,54,55},
    { 93,79,44,35,48,49,35,35,51,52,53,69,70,69,70,71}
};


void scene_game_setup() {
    scenesTable[SCENE_GAME] = {
        &scene_game_on_awake,
        &scene_game_on_enter,
        &scene_game_on_frame,
        &scene_game_on_exit
    };
}

void scene_game_on_awake() {
} // functions
void updateShip() {
    if (lvGamepad(0).up) {
        shipY = (shipY > 30) ? shipY - 1 : 30;
    } else if (lvGamepad(0).down) {
        int limit = lvk_display_h - 28;
        shipY = (shipY < limit) ? shipY + 1 : limit;
    }
    if (lvGamepad(0).left) {
        shipAngle = shipAngle > -2 ? shipAngle - 1 : -2;
    } else if (lvGamepad(0).rigth) {
        shipAngle = shipAngle < 2 ? shipAngle + 1 : 2;
    } else {
        if (shipAngle < 0) shipAngle++;
        else if (shipAngle > 0) shipAngle--;
    }
    if (shipAngle) {
        shipX += shipAngle;
        if( shipX < 1 ) shipX = 1;
        if( shipX > lvk_display_w - 18 ) shipX = lvk_display_w - 18;
    }
    if(lvGamepads.isDown(lvGamepad(0).a)) {
        addHeroBullet(shipX + 4, shipY);
    }
}
void Enemy::update() {
    // start vs end positions
    if(this->cy > this->y) this->cy--;
    if(this->cy < this->y) this->cy++;
    if(this->cx > this->x) this->cx--;
    if(this->cx < this->x) this->cx++;
    if(this->dying > 1) {
        if(f%4 == 3) {
            this->dying -= 1;
            if(this->dying == 4) this->explode();
        }
        return;
    } else if (this->dying == 1) {
        return;
    }
    Bullet *bp = bullets;
    while(bp != NULL) {
        if(bp->ally == true) {
            int mx = this->x + 4;
            int my = this->y + 4;
            int bdx = (bp->x - mx) * (bp->x - mx);
            int bdy = (bp->y - my) * (bp->y - my);
            if (bdx < 36 && bdy < 36) {
                this->dying = 6;
                return;
            }
        }
        bp = bp->next;
    }
    if((f + this->x)%30 == 0) {
        addEnemyBullet(this->x + 4, this->y, 0, 2);
    }
}
void Enemy::explode() {
    addEnemyBullet(this->x + 4, this->y,  2,  2);
    addEnemyBullet(this->x + 4, this->y, -2,  2);
    addEnemyBullet(this->x + 4, this->y,  2, -2);
    addEnemyBullet(this->x + 4, this->y,  2, -2);
}
void addEnemy(int type, int x, int y, int cx, int cy) {
    // empty list case
    if (enemies == NULL) {
        enemies = new Enemy(type, x, y, cx, cy);
    } else {
        Enemy *ep = enemies;
        while(ep && ep->next != NULL) ep = ep->next;
        ep->next = new Enemy(type, x, y, cx, cy);
    }
}
void addEnemyBullet(int x, int y, int dx, int dy) {
    // empty list case
    if (bullets == NULL) {
        bullets = new Bullet(false, x, y, dx, dy);
    } else {
        Bullet *bp = bullets;
        while(bp && bp->next != NULL) bp = bp->next;
        bp->next = new Bullet(false, x, y, dx, dy);
    }
}
void addHeroBullet(int x, int y) {
    // empty list case
    if (bullets == NULL) {
        bullets = new Bullet(true, x, y, 0, -2);
    } else {
        Bullet *bp = bullets;
        while(bp && bp->next != NULL) bp = bp->next;
        bp->next = new Bullet(true, x, y, 0, -2);
    }
}
void updateBullets() {
    Bullet *bp = bullets;
    while(bp != NULL) {
        bp->x += bp->dx;
        bp->y += bp->dy;
        if (bp->next != NULL && (bp->next->y < 5 || bp->next->y > lvk_display_h )) {
            Bullet *twoAhead = bp->next->next;
            delete bp->next;
            bp->next = twoAhead;
        }
        bp = bp->next;
    }
}
void drawBullets() {
    Bullet *bp = bullets;
    while(bp != NULL) {
        Bullet b = *(bp);
        PNG::hero->draw(
            lv::Region( 80 + (((f/2)%2) * 8 ) + (b.ally ? 0 : 16), 0, 8, 8),
            lv::Point( b.x, b.y)
        );
        bp = b.next;
    }
}
void updateEnemies() {
    Enemy *ep = enemies;
    if(ep == NULL) {
        addEnemy(0, 20, 20, -20, 0);
        addEnemy(0, 40, 15, 30, 0);
        addEnemy(0, 60, 15, 70, 0);
        addEnemy(0, 80, 20, 130, 0);
    }
    // roots can die to :C
    if (ep && ep->dying == 1) {
        Enemy *ahead = ep->next;
        delete ep;
        ep = ahead;
        enemies = ahead;
    }
    while(ep != NULL) {
        if (ep->next != NULL && ep->next->dying == 1) {
            Enemy *twoAhead = ep->next->next;
            delete ep->next;
            ep->next = twoAhead;
        }
        ep->update();
        ep = ep->next;
    }
}
void drawEnemies() {
    Enemy *ep = enemies;
    while(ep != NULL) {
        Enemy e = *(ep);
        if (e.dying > 0) {
            PNG::hero->draw(
                lv::Region( 32 + (6 - e.dying) * 16, 48, 16, 16),
                lv::Point( e.x, e.y)
            );
        } else {
            PNG::hero->draw(
                lv::Region( (f/2)%2 * 16, 48, 16, 16),
                lv::Point( e.cx, e.cy)
            );
        }
        ep = e.next;
    }
}
void drawShip() {
    PNG::hero->draw(
        lv::Region( (shipAngle + 2) * 16, (f/2)%2 * 24, 16, 24),
        lv::Point( shipX, shipY)
    );
}
void drawHUD() {
    lvDisplay.fillRect(lv::Region(0,0,130,10), 0);
}
void updateBackground() {
    if(--subline == 0) {
        subline = 8;
        line -= 1;
        if (line == 63) line = 255;
    }
}
void drawBackground() {
    for(int y = 0; y < 16; y++) {
        for(int x = 0; x < 16; x++) {
            char tile = map[line - y][x];
            PNG::bg->draw(
                lv::Region( (tile%16) * 8, (tile/16) * 8, 8, 8),
                lv::Point( x * 8, (16 - y) * 8 - subline)
            );
        }
    }
//}

}

void scene_game_on_enter() {
    PNG::bg = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_bg);
    PNG::hero = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_hero);
// on enter
    f = 0;
    line = 255;
    subline = 8;
    shipAngle = 0;
    shipX = (lvk_display_w - 16) / 2;
    shipY = lvk_display_h - 28;
}

void scene_game_on_frame() {
    f++;

    lvDisplay.clear(0);
    
    updateBackground();
    updateShip();
    updateBullets();
    updateEnemies();
    drawBackground();
    drawBullets();
    drawEnemies();
    drawShip();
    drawHUD();

}

void scene_game_on_exit() {
    delete PNG::bg;
    delete PNG::hero;

}
